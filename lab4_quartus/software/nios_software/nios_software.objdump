
nios_software.elf:     file format elf32-littlenios2
nios_software.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010230

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00002c98 memsz 0x00002c98 flags r-x
    LOAD off    0x00003cb8 vaddr 0x00012cb8 paddr 0x0001431c align 2**12
         filesz 0x00001664 memsz 0x00001664 flags rw-
    LOAD off    0x00005980 vaddr 0x00015980 paddr 0x00015980 align 2**12
         filesz 0x00000000 memsz 0x00000134 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002a50  00010230  00010230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  00012c80  00012c80  00003c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001664  00012cb8  0001431c  00003cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000134  00015980  00015980  00005980  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00015ab4  00015ab4  0000531c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000531c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000618  00000000  00000000  00005340  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007b44  00000000  00000000  00005958  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002b59  00000000  00000000  0000d49c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002c74  00000000  00000000  0000fff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000c2c  00000000  00000000  00012c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001d46  00000000  00000000  00013898  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000cd1  00000000  00000000  000155de  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000162b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d8  00000000  00000000  000162f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000181aa  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000181ad  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000181b9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000181ba  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000181bb  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000181bf  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000181c3  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000181c7  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000181d2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000181dd  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000181e8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000035  00000000  00000000  000181f3  2**0
                  CONTENTS, READONLY
 29 .jdi          000054c0  00000000  00000000  00018228  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004ff24  00000000  00000000  0001d6e8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010230 l    d  .text	00000000 .text
00012c80 l    d  .rodata	00000000 .rodata
00012cb8 l    d  .rwdata	00000000 .rwdata
00015980 l    d  .bss	00000000 .bss
00015ab4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_software_bsp//obj/HAL/src/crt0.o
00010268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 lab4_main.c
00000000 l    df *ABS*	00000000 alt_load.c
0001070c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000108a4 l     F .text	00000034 alt_dev_reg
00012cb8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00010b80 l     F .text	0000020c altera_avalon_jtag_uart_irq
00010d8c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00011648 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0001177c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000117a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011c08 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011d68 l     F .text	0000003c alt_get_errno
00011da4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00013ec0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
000159ac g     O .bss	00000004 alt_instruction_exception_handler
000107f8 g     F .text	0000007c alt_main
000159b4 g     O .bss	00000100 alt_irq
0001431c g       *ABS*	00000000 __flash_rwdata_start
0001046c g     F .text	000000ac audioRegWrite
00012214 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000142ec g     O .rwdata	00000004 ledsBasePtr
000159b0 g     O .bss	00000004 errno
00015998 g     O .bss	00000004 alt_argv
0001c2e4 g       *ABS*	00000000 _gp
00010874 g     F .text	00000030 usleep
00013d40 g     O .rwdata	00000180 alt_fd_list
00012238 g     F .text	00000090 alt_find_dev
000125f8 g     F .text	00000148 memcpy
00011cec g     F .text	0000007c alt_io_redirect
00012c80 g       *ABS*	00000000 __DTOR_END__
00012494 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0001062c g     F .text	00000078 i2cStart
00010f84 g     F .text	0000021c altera_avalon_jtag_uart_read
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00012b68 g     F .text	00000064 .hidden __udivsi3
00014300 g     O .rwdata	00000004 alt_max_fd
00015984 g     O .bss	00000004 second
00014314 g     O .rwdata	00000004 _global_impure_ptr
00015ab4 g       *ABS*	00000000 __bss_end
00011b18 g     F .text	000000f0 alt_iic_isr_register
0001210c g     F .text	00000108 alt_tick
000106a4 g     F .text	00000068 i2cStop
00011acc g     F .text	0000004c alt_ic_irq_enabled
00012070 g     F .text	0000009c alt_alarm_stop
000159a0 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
00013d18 g     O .rwdata	00000028 alt_dev_null
0001175c g     F .text	00000020 alt_dcache_flush_all
0001431c g       *ABS*	00000000 __ram_rwdata_end
000142f8 g     O .rwdata	00000008 alt_dev_list
00012cb8 g       *ABS*	00000000 __ram_rodata_end
00012bcc g     F .text	00000058 .hidden __umodsi3
00015ab4 g       *ABS*	00000000 end
00010ac0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00012c80 g       *ABS*	00000000 __CTOR_LIST__
00018000 g       *ABS*	00000000 __alt_stack_pointer
000111a0 g     F .text	00000224 altera_avalon_jtag_uart_write
000128f0 g     F .text	00000180 __call_exitprocs
00010230 g     F .text	0000003c _start
000159a4 g     O .bss	00000004 _alt_tick_rate
000159a8 g     O .bss	00000004 _alt_nticks
00010910 g     F .text	0000004c alt_sys_init
000127d8 g     F .text	00000118 __register_exitproc
0001031c g     F .text	00000150 codecInit
00010e2c g     F .text	00000068 altera_avalon_jtag_uart_close
00012c24 g     F .text	00000028 .hidden __mulsi3
00012cb8 g       *ABS*	00000000 __ram_rwdata_start
00012c80 g       *ABS*	00000000 __ram_rodata_start
0001095c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000123d0 g     F .text	000000c4 alt_get_fd
000114f0 g     F .text	00000158 alt_busy_sleep
0001257c g     F .text	0000007c memcmp
00010a1c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015ab4 g       *ABS*	00000000 __alt_stack_base
00010a6c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000142e4 g     O .rwdata	00000004 i2cDataBit_ptr
000122c8 g     F .text	00000108 alt_find_file
000117e4 g     F .text	000000a4 alt_dev_llist_insert
00015980 g       *ABS*	00000000 __bss_start
0001026c g     F .text	000000b0 main
0001599c g     O .bss	00000004 alt_envp
000109bc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00014304 g     O .rwdata	00000004 alt_errno
00012a70 g     F .text	00000084 .hidden __divsi3
00012c80 g       *ABS*	00000000 __CTOR_END__
00012c80 g       *ABS*	00000000 __flash_rodata_start
00012c80 g       *ABS*	00000000 __DTOR_LIST__
000108d8 g     F .text	00000038 alt_irq_init
00011fec g     F .text	00000084 alt_release_fd
00012530 g     F .text	00000014 atexit
00014318 g     O .rwdata	00000004 _impure_ptr
00015994 g     O .bss	00000004 alt_argc
000118e8 g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00015980 g     O .bss	00000004 busBridgePtr
000142f0 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00015988 g     O .bss	00000004 third
00011968 g     F .text	00000050 alt_ic_isr_register
0001598c g     O .bss	00000004 first
000142e8 g     O .rwdata	00000004 i2cClockBit_ptr
0001431c g       *ABS*	00000000 _edata
00015ab4 g       *ABS*	00000000 _end
00010230 g       *ABS*	00000000 __ram_exceptions_end
00010e94 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00011a40 g     F .text	0000008c alt_ic_irq_disable
00012544 g     F .text	00000038 exit
00012af4 g     F .text	00000074 .hidden __modsi3
00018000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00012c4c g     F .text	00000034 _exit
000113c4 g     F .text	0000012c alt_alarm_start
00010518 g     F .text	00000114 i2cWriteByte
00012740 g     F .text	00000098 strlen
00011e90 g     F .text	0000015c open
00011948 g     F .text	00000020 alt_icache_flush_all
00014308 g     O .rwdata	00000004 alt_priority_mask
000119b8 g     F .text	00000088 alt_ic_irq_enable
00015990 g     O .bss	00000004 dataToWrite
0001430c g     O .rwdata	00000008 alt_alarm_list
00011888 g     F .text	00000060 _do_ctors
00011684 g     F .text	000000d8 close
00010774 g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408c14 	ori	at,at,560
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	00800074 	movhi	r2,1
   10140:	10966d04 	addi	r2,r2,22964
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	00800074 	movhi	r2,1
   10158:	10966d04 	addi	r2,r2,22964
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <_gp+0xffff3e48>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <_gp+0xffff3e3c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e4:	00bfffc4 	movi	r2,-1
   101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f0:	d0a5b217 	ldw	r2,-26936(gp)
   101f4:	10000726 	beq	r2,zero,10214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f8:	d0a5b217 	ldw	r2,-26936(gp)
   101fc:	e0fffd17 	ldw	r3,-12(fp)
   10200:	e1bffe17 	ldw	r6,-8(fp)
   10204:	e17fff17 	ldw	r5,-4(fp)
   10208:	1809883a 	mov	r4,r3
   1020c:	103ee83a 	callr	r2
   10210:	00000206 	br	1021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10218:	0005883a 	mov	r2,zero
}
   1021c:	e037883a 	mov	sp,fp
   10220:	dfc00117 	ldw	ra,4(sp)
   10224:	df000017 	ldw	fp,0(sp)
   10228:	dec00204 	addi	sp,sp,8
   1022c:	f800283a 	ret

Disassembly of section .text:

00010230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10234:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
   10238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1023c:	d6b0b914 	ori	gp,gp,49892
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10244:	10966014 	ori	r2,r2,22912

    movhi r3, %hi(__bss_end)
   10248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1024c:	18d6ad14 	ori	r3,r3,23220

    beq r2, r3, 1f
   10250:	10c00326 	beq	r2,r3,10260 <_start+0x30>

0:
    stw zero, (r2)
   10254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1025c:	10fffd36 	bltu	r2,r3,10254 <_gp+0xffff3f70>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10260:	00107740 	call	10774 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10264:	00107f80 	call	107f8 <alt_main>

00010268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10268:	003fff06 	br	10268 <_gp+0xffff3f84>

0001026c <main>:
// +++++++++++++++++++++++++++ Misc. Defines +++++++++++++++++++++++++++++++++++++
#define CODEC_I2C_ADDR  0x34
#define FALSE 0
#define TRUE 1

int main(void) {
   1026c:	defffd04 	addi	sp,sp,-12
   10270:	dfc00215 	stw	ra,8(sp)
   10274:	df000115 	stw	fp,4(sp)
   10278:	df000104 	addi	fp,sp,4
  
  volatile bool final_result;
  final_result = FALSE;
   1027c:	e03fff05 	stb	zero,-4(fp)
	final_result = codecInit();
   10280:	001031c0 	call	1031c <codecInit>
   10284:	e0bfff05 	stb	r2,-4(fp)
  
	while (1) {
    dataToWrite = 0x12345678;
   10288:	00848d34 	movhi	r2,4660
   1028c:	10959e04 	addi	r2,r2,22136
   10290:	d0a5ab15 	stw	r2,-26964(gp)
		leds = 0xabcd;
   10294:	d0a00217 	ldw	r2,-32760(gp)
   10298:	00eaf354 	movui	r3,43981
   1029c:	10c00015 	stw	r3,0(r2)
    *busBridgePtr = dataToWrite;
   102a0:	d0a5a717 	ldw	r2,-26980(gp)
   102a4:	d0e5ab17 	ldw	r3,-26964(gp)
   102a8:	10c00015 	stw	r3,0(r2)
    dataToWrite += 0x01010101;
   102ac:	d0e5ab17 	ldw	r3,-26964(gp)
   102b0:	00804074 	movhi	r2,257
   102b4:	10804044 	addi	r2,r2,257
   102b8:	1885883a 	add	r2,r3,r2
   102bc:	d0a5ab15 	stw	r2,-26964(gp)
    *(busBridgePtr + 1) = dataToWrite;
   102c0:	d0a5a717 	ldw	r2,-26980(gp)
   102c4:	10800104 	addi	r2,r2,4
   102c8:	d0e5ab17 	ldw	r3,-26964(gp)
   102cc:	10c00015 	stw	r3,0(r2)
    dataToWrite += 0x01010101;
   102d0:	d0e5ab17 	ldw	r3,-26964(gp)
   102d4:	00804074 	movhi	r2,257
   102d8:	10804044 	addi	r2,r2,257
   102dc:	1885883a 	add	r2,r3,r2
   102e0:	d0a5ab15 	stw	r2,-26964(gp)
    *(busBridgePtr + 2) = dataToWrite;
   102e4:	d0a5a717 	ldw	r2,-26980(gp)
   102e8:	10800204 	addi	r2,r2,8
   102ec:	d0e5ab17 	ldw	r3,-26964(gp)
   102f0:	10c00015 	stw	r3,0(r2)
    
    first  = *busBridgePtr;
   102f4:	d0a5a717 	ldw	r2,-26980(gp)
   102f8:	10800017 	ldw	r2,0(r2)
   102fc:	d0a5aa15 	stw	r2,-26968(gp)
    second = *(busBridgePtr + 1);
   10300:	d0a5a717 	ldw	r2,-26980(gp)
   10304:	10800117 	ldw	r2,4(r2)
   10308:	d0a5a815 	stw	r2,-26976(gp)
    third  = *(busBridgePtr + 2);
   1030c:	d0a5a717 	ldw	r2,-26980(gp)
   10310:	10800217 	ldw	r2,8(r2)
   10314:	d0a5a915 	stw	r2,-26972(gp)
	}
   10318:	003fdb06 	br	10288 <_gp+0xffff3fa4>

0001031c <codecInit>:
}

// ++++++++++++++++++++++++++++++++ CodecInit +++++++++++++++++++++++++++++++++++
bool codecInit(void){
   1031c:	defffd04 	addi	sp,sp,-12
   10320:	dfc00215 	stw	ra,8(sp)
   10324:	df000115 	stw	fp,4(sp)
   10328:	df000104 	addi	fp,sp,4
  bool success = TRUE;
   1032c:	00800044 	movi	r2,1
   10330:	e0bfff05 	stb	r2,-4(fp)
  if (success)
   10334:	e0bfff03 	ldbu	r2,-4(fp)
   10338:	10000426 	beq	r2,zero,1034c <codecInit+0x30>
    success = audioRegWrite(15, 0x0000);  // reset
   1033c:	000b883a 	mov	r5,zero
   10340:	010003c4 	movi	r4,15
   10344:	001046c0 	call	1046c <audioRegWrite>
   10348:	e0bfff05 	stb	r2,-4(fp)
  if (success)
   1034c:	e0bfff03 	ldbu	r2,-4(fp)
   10350:	10000426 	beq	r2,zero,10364 <codecInit+0x48>
    success = audioRegWrite(9, 0x0000);  // inactive interface
   10354:	000b883a 	mov	r5,zero
   10358:	01000244 	movi	r4,9
   1035c:	001046c0 	call	1046c <audioRegWrite>
   10360:	e0bfff05 	stb	r2,-4(fp)
  //usleep(20*1000);
  if (success)
   10364:	e0bfff03 	ldbu	r2,-4(fp)
   10368:	10000426 	beq	r2,zero,1037c <codecInit+0x60>
    success = audioRegWrite(0, 0x0017);  // Left Line In: set left line in volume
   1036c:	014005c4 	movi	r5,23
   10370:	0009883a 	mov	r4,zero
   10374:	001046c0 	call	1046c <audioRegWrite>
   10378:	e0bfff05 	stb	r2,-4(fp)
  if (success)
   1037c:	e0bfff03 	ldbu	r2,-4(fp)
   10380:	10000426 	beq	r2,zero,10394 <codecInit+0x78>
    success = audioRegWrite(1, 0x0017);  // Right Line In: set right line in volume
   10384:	014005c4 	movi	r5,23
   10388:	01000044 	movi	r4,1
   1038c:	001046c0 	call	1046c <audioRegWrite>
   10390:	e0bfff05 	stb	r2,-4(fp)
  if (success)
   10394:	e0bfff03 	ldbu	r2,-4(fp)
   10398:	10000426 	beq	r2,zero,103ac <codecInit+0x90>
    success = audioRegWrite(2, 0x005B);  // Left Headphone Out: set left line out volume
   1039c:	014016c4 	movi	r5,91
   103a0:	01000084 	movi	r4,2
   103a4:	001046c0 	call	1046c <audioRegWrite>
   103a8:	e0bfff05 	stb	r2,-4(fp)
  if (success)
   103ac:	e0bfff03 	ldbu	r2,-4(fp)
   103b0:	10000426 	beq	r2,zero,103c4 <codecInit+0xa8>
    success = audioRegWrite(3, 0x005B);  // Right Headphone Out: set right line out volume
   103b4:	014016c4 	movi	r5,91
   103b8:	010000c4 	movi	r4,3
   103bc:	001046c0 	call	1046c <audioRegWrite>
   103c0:	e0bfff05 	stb	r2,-4(fp)
  if (success)
   103c4:	e0bfff03 	ldbu	r2,-4(fp)
   103c8:	10000426 	beq	r2,zero,103dc <codecInit+0xc0>
    success = audioRegWrite(4, 0x0015);  // Analogue Audio Path Control: set mic as input and boost it, and enable dac
   103cc:	01400544 	movi	r5,21
   103d0:	01000104 	movi	r4,4
   103d4:	001046c0 	call	1046c <audioRegWrite>
   103d8:	e0bfff05 	stb	r2,-4(fp)
  if (success)
   103dc:	e0bfff03 	ldbu	r2,-4(fp)
   103e0:	10000426 	beq	r2,zero,103f4 <codecInit+0xd8>
    success = audioRegWrite(5, 0x0000);  // Digital Audio Path Control: disable soft mute
   103e4:	000b883a 	mov	r5,zero
   103e8:	01000144 	movi	r4,5
   103ec:	001046c0 	call	1046c <audioRegWrite>
   103f0:	e0bfff05 	stb	r2,-4(fp)
  if (success)
   103f4:	e0bfff03 	ldbu	r2,-4(fp)
   103f8:	10000426 	beq	r2,zero,1040c <codecInit+0xf0>
    success = audioRegWrite(6, 0);  // power down control: power on all
   103fc:	000b883a 	mov	r5,zero
   10400:	01000184 	movi	r4,6
   10404:	001046c0 	call	1046c <audioRegWrite>
   10408:	e0bfff05 	stb	r2,-4(fp)
  if (success)
   1040c:	e0bfff03 	ldbu	r2,-4(fp)
   10410:	10000426 	beq	r2,zero,10424 <codecInit+0x108>
    success = audioRegWrite(7, 0x0042);  // I2S, iwl=16-bits, Enable Master Mode
   10414:	01401084 	movi	r5,66
   10418:	010001c4 	movi	r4,7
   1041c:	001046c0 	call	1046c <audioRegWrite>
   10420:	e0bfff05 	stb	r2,-4(fp)
  // success = audioRegWrite(7, 0x0041);  // MSB-First, left justified, iwl=16-bits, Enable Master Mode
  if (success)
   10424:	e0bfff03 	ldbu	r2,-4(fp)
   10428:	10000426 	beq	r2,zero,1043c <codecInit+0x120>
    success = audioRegWrite(8, 0x0020);  // Normal, Base OVer-Sampleing Rate 384 fs (BOSR=1)
   1042c:	01400804 	movi	r5,32
   10430:	01000204 	movi	r4,8
   10434:	001046c0 	call	1046c <audioRegWrite>
   10438:	e0bfff05 	stb	r2,-4(fp)
  if (success)
   1043c:	e0bfff03 	ldbu	r2,-4(fp)
   10440:	10000426 	beq	r2,zero,10454 <codecInit+0x138>
    success = audioRegWrite(9, 0x0001);  // active interface
   10444:	01400044 	movi	r5,1
   10448:	01000244 	movi	r4,9
   1044c:	001046c0 	call	1046c <audioRegWrite>
   10450:	e0bfff05 	stb	r2,-4(fp)

  return success;
   10454:	e0bfff03 	ldbu	r2,-4(fp)
}
   10458:	e037883a 	mov	sp,fp
   1045c:	dfc00117 	ldw	ra,4(sp)
   10460:	df000017 	ldw	fp,0(sp)
   10464:	dec00204 	addi	sp,sp,8
   10468:	f800283a 	ret

0001046c <audioRegWrite>:

// +++++++++++++++++++++++++++++ audioRegWrite ++++++++++++++++++++++++++++++++++
// ++ This function writes the given 9 bit data to the specified register in the
// ++ Codec
bool audioRegWrite(alt_u8 codecRegAddr, alt_u16 data16) {
   1046c:	defffb04 	addi	sp,sp,-20
   10470:	dfc00415 	stw	ra,16(sp)
   10474:	df000315 	stw	fp,12(sp)
   10478:	df000304 	addi	fp,sp,12
   1047c:	2007883a 	mov	r3,r4
   10480:	2805883a 	mov	r2,r5
   10484:	e0fffe05 	stb	r3,-8(fp)
   10488:	e0bfff0d 	sth	r2,-4(fp)
  bool success;
  alt_u8 dataByte, controlByte;
  dataByte = data16 & 0xFF;
   1048c:	e0bfff0b 	ldhu	r2,-4(fp)
   10490:	e0bffd05 	stb	r2,-12(fp)
  controlByte = (codecRegAddr << 1) & 0xFE;
   10494:	e0bffe03 	ldbu	r2,-8(fp)
   10498:	1085883a 	add	r2,r2,r2
   1049c:	e0bffd45 	stb	r2,-11(fp)
  controlByte |= ((data16 >> 8) & 0x01);
   104a0:	e0bfff0b 	ldhu	r2,-4(fp)
   104a4:	1004d23a 	srli	r2,r2,8
   104a8:	1080004c 	andi	r2,r2,1
   104ac:	1007883a 	mov	r3,r2
   104b0:	e0bffd43 	ldbu	r2,-11(fp)
   104b4:	1884b03a 	or	r2,r3,r2
   104b8:	e0bffd45 	stb	r2,-11(fp)
  i2cStart();
   104bc:	001062c0 	call	1062c <i2cStart>
  success = i2cWriteByte(CODEC_I2C_ADDR);
   104c0:	01000d04 	movi	r4,52
   104c4:	00105180 	call	10518 <i2cWriteByte>
   104c8:	e0bffd85 	stb	r2,-10(fp)
  success = i2cWriteByte(controlByte);
   104cc:	e0bffd43 	ldbu	r2,-11(fp)
   104d0:	1009883a 	mov	r4,r2
   104d4:	00105180 	call	10518 <i2cWriteByte>
   104d8:	e0bffd85 	stb	r2,-10(fp)
  success = i2cWriteByte(dataByte);
   104dc:	e0bffd03 	ldbu	r2,-12(fp)
   104e0:	1009883a 	mov	r4,r2
   104e4:	00105180 	call	10518 <i2cWriteByte>
   104e8:	e0bffd85 	stb	r2,-10(fp)
  i2cStop();
   104ec:	00106a40 	call	106a4 <i2cStop>
    
  usleep(7*1000);
   104f0:	0106d604 	movi	r4,7000
   104f4:	00108740 	call	10874 <usleep>
  usleep(50*1000);
   104f8:	0130d414 	movui	r4,50000
   104fc:	00108740 	call	10874 <usleep>
  return success;
   10500:	e0bffd83 	ldbu	r2,-10(fp)
}
   10504:	e037883a 	mov	sp,fp
   10508:	dfc00117 	ldw	ra,4(sp)
   1050c:	df000017 	ldw	fp,0(sp)
   10510:	dec00204 	addi	sp,sp,8
   10514:	f800283a 	ret

00010518 <i2cWriteByte>:

// +++++++++++++++++++++++++++++ i2cWriteByte ++++++++++++++++++++++++++++++++++
bool i2cWriteByte(alt_u8 Data) { // return true if device response ack
   10518:	defffa04 	addi	sp,sp,-24
   1051c:	dfc00515 	stw	ra,20(sp)
   10520:	df000415 	stw	fp,16(sp)
   10524:	df000404 	addi	fp,sp,16
   10528:	2005883a 	mov	r2,r4
   1052c:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 Mask = 0x80;
   10530:	00bfe004 	movi	r2,-128
   10534:	e0bffc05 	stb	r2,-16(fp)
  bool success;
  int i;
    
  i2cDataBitDirection = 1;
   10538:	d0a00017 	ldw	r2,-32768(gp)
   1053c:	10800104 	addi	r2,r2,4
   10540:	00c00044 	movi	r3,1
   10544:	10c00015 	stw	r3,0(r2)
  for(i=0; i<8; i++) {
   10548:	e03ffd15 	stw	zero,-12(fp)
   1054c:	00001c06 	br	105c0 <i2cWriteByte+0xa8>
    i2cClockBit = 0;
   10550:	d0a00117 	ldw	r2,-32764(gp)
   10554:	10000015 	stw	zero,0(r2)
    if (Data & Mask) {
   10558:	e0ffff03 	ldbu	r3,-4(fp)
   1055c:	e0bffc03 	ldbu	r2,-16(fp)
   10560:	1884703a 	and	r2,r3,r2
   10564:	10803fcc 	andi	r2,r2,255
   10568:	10000426 	beq	r2,zero,1057c <i2cWriteByte+0x64>
      i2cDataBit = 1;
   1056c:	d0a00017 	ldw	r2,-32768(gp)
   10570:	00c00044 	movi	r3,1
   10574:	10c00015 	stw	r3,0(r2)
   10578:	00000206 	br	10584 <i2cWriteByte+0x6c>
    } else {
      i2cDataBit = 0;
   1057c:	d0a00017 	ldw	r2,-32768(gp)
   10580:	10000015 	stw	zero,0(r2)
    }
    Mask >>= 1;
   10584:	e0bffc03 	ldbu	r2,-16(fp)
   10588:	1004d07a 	srli	r2,r2,1
   1058c:	e0bffc05 	stb	r2,-16(fp)
    SCL_DELAY;
   10590:	01000044 	movi	r4,1
   10594:	00108740 	call	10874 <usleep>
    i2cClockBit = 1;
   10598:	d0a00117 	ldw	r2,-32764(gp)
   1059c:	00c00044 	movi	r3,1
   105a0:	10c00015 	stw	r3,0(r2)
    SCL_DELAY;
   105a4:	01000044 	movi	r4,1
   105a8:	00108740 	call	10874 <usleep>
    i2cClockBit = 0;
   105ac:	d0a00117 	ldw	r2,-32764(gp)
   105b0:	10000015 	stw	zero,0(r2)
  alt_u8 Mask = 0x80;
  bool success;
  int i;
    
  i2cDataBitDirection = 1;
  for(i=0; i<8; i++) {
   105b4:	e0bffd17 	ldw	r2,-12(fp)
   105b8:	10800044 	addi	r2,r2,1
   105bc:	e0bffd15 	stw	r2,-12(fp)
   105c0:	e0bffd17 	ldw	r2,-12(fp)
   105c4:	10800210 	cmplti	r2,r2,8
   105c8:	103fe11e 	bne	r2,zero,10550 <_gp+0xffff426c>
    SCL_DELAY;
    i2cClockBit = 0;
    }
    
    // get ack
    i2cDataBitDirection = 0;
   105cc:	d0a00017 	ldw	r2,-32768(gp)
   105d0:	10800104 	addi	r2,r2,4
   105d4:	10000015 	stw	zero,0(r2)
    SCL_DELAY;
   105d8:	01000044 	movi	r4,1
   105dc:	00108740 	call	10874 <usleep>
    i2cClockBit = 1;
   105e0:	d0a00117 	ldw	r2,-32764(gp)
   105e4:	00c00044 	movi	r3,1
   105e8:	10c00015 	stw	r3,0(r2)
    SCL_DELAY;
   105ec:	01000044 	movi	r4,1
   105f0:	00108740 	call	10874 <usleep>
    success = ((i2cDataBit && 1) == 0) ? TRUE : FALSE;
   105f4:	d0a00017 	ldw	r2,-32768(gp)
   105f8:	10800017 	ldw	r2,0(r2)
   105fc:	1005003a 	cmpeq	r2,r2,zero
   10600:	e0bffe05 	stb	r2,-8(fp)
    i2cClockBit = 0; // clock low         
   10604:	d0a00117 	ldw	r2,-32764(gp)
   10608:	10000015 	stw	zero,0(r2)
    SCL_DELAY; // clock low delay
   1060c:	01000044 	movi	r4,1
   10610:	00108740 	call	10874 <usleep>
    return success;
   10614:	e0bffe03 	ldbu	r2,-8(fp)
}    
   10618:	e037883a 	mov	sp,fp
   1061c:	dfc00117 	ldw	ra,4(sp)
   10620:	df000017 	ldw	fp,0(sp)
   10624:	dec00204 	addi	sp,sp,8
   10628:	f800283a 	ret

0001062c <i2cStart>:

// ++++++++++++++++++++++++++++++++ i2cStart +++++++++++++++++++++++++++++++++++
void i2cStart(void) {
   1062c:	defffe04 	addi	sp,sp,-8
   10630:	dfc00115 	stw	ra,4(sp)
   10634:	df000015 	stw	fp,0(sp)
   10638:	d839883a 	mov	fp,sp
  i2cDataBitDirection = 1;
   1063c:	d0a00017 	ldw	r2,-32768(gp)
   10640:	10800104 	addi	r2,r2,4
   10644:	00c00044 	movi	r3,1
   10648:	10c00015 	stw	r3,0(r2)
  i2cDataBit = 1;
   1064c:	d0a00017 	ldw	r2,-32768(gp)
   10650:	00c00044 	movi	r3,1
   10654:	10c00015 	stw	r3,0(r2)
  i2cClockBit = 1;
   10658:	d0a00117 	ldw	r2,-32764(gp)
   1065c:	00c00044 	movi	r3,1
   10660:	10c00015 	stw	r3,0(r2)
  SCL_DELAY;
   10664:	01000044 	movi	r4,1
   10668:	00108740 	call	10874 <usleep>
  i2cDataBit = 0;
   1066c:	d0a00017 	ldw	r2,-32768(gp)
   10670:	10000015 	stw	zero,0(r2)
  SCL_DELAY;
   10674:	01000044 	movi	r4,1
   10678:	00108740 	call	10874 <usleep>
  i2cClockBit = 0;
   1067c:	d0a00117 	ldw	r2,-32764(gp)
   10680:	10000015 	stw	zero,0(r2)
  SCL_DELAY;
   10684:	01000044 	movi	r4,1
   10688:	00108740 	call	10874 <usleep>
}
   1068c:	0001883a 	nop
   10690:	e037883a 	mov	sp,fp
   10694:	dfc00117 	ldw	ra,4(sp)
   10698:	df000017 	ldw	fp,0(sp)
   1069c:	dec00204 	addi	sp,sp,8
   106a0:	f800283a 	ret

000106a4 <i2cStop>:

// ++++++++++++++++++++++++++++++++ i2cStop +++++++++++++++++++++++++++++++++++
void i2cStop(void) {
   106a4:	defffe04 	addi	sp,sp,-8
   106a8:	dfc00115 	stw	ra,4(sp)
   106ac:	df000015 	stw	fp,0(sp)
   106b0:	d839883a 	mov	fp,sp
  i2cDataBitDirection = 1;
   106b4:	d0a00017 	ldw	r2,-32768(gp)
   106b8:	10800104 	addi	r2,r2,4
   106bc:	00c00044 	movi	r3,1
   106c0:	10c00015 	stw	r3,0(r2)
  i2cDataBit = 0;
   106c4:	d0a00017 	ldw	r2,-32768(gp)
   106c8:	10000015 	stw	zero,0(r2)
  i2cClockBit = 1;
   106cc:	d0a00117 	ldw	r2,-32764(gp)
   106d0:	00c00044 	movi	r3,1
   106d4:	10c00015 	stw	r3,0(r2)
  SCL_DELAY;
   106d8:	01000044 	movi	r4,1
   106dc:	00108740 	call	10874 <usleep>
  i2cDataBit = 1;
   106e0:	d0a00017 	ldw	r2,-32768(gp)
   106e4:	00c00044 	movi	r3,1
   106e8:	10c00015 	stw	r3,0(r2)
  SCL_DELAY;
   106ec:	01000044 	movi	r4,1
   106f0:	00108740 	call	10874 <usleep>
}
   106f4:	0001883a 	nop
   106f8:	e037883a 	mov	sp,fp
   106fc:	dfc00117 	ldw	ra,4(sp)
   10700:	df000017 	ldw	fp,0(sp)
   10704:	dec00204 	addi	sp,sp,8
   10708:	f800283a 	ret

0001070c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1070c:	defffc04 	addi	sp,sp,-16
   10710:	df000315 	stw	fp,12(sp)
   10714:	df000304 	addi	fp,sp,12
   10718:	e13ffd15 	stw	r4,-12(fp)
   1071c:	e17ffe15 	stw	r5,-8(fp)
   10720:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10724:	e0fffe17 	ldw	r3,-8(fp)
   10728:	e0bffd17 	ldw	r2,-12(fp)
   1072c:	18800c26 	beq	r3,r2,10760 <alt_load_section+0x54>
  {
    while( to != end )
   10730:	00000806 	br	10754 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10734:	e0bffe17 	ldw	r2,-8(fp)
   10738:	10c00104 	addi	r3,r2,4
   1073c:	e0fffe15 	stw	r3,-8(fp)
   10740:	e0fffd17 	ldw	r3,-12(fp)
   10744:	19000104 	addi	r4,r3,4
   10748:	e13ffd15 	stw	r4,-12(fp)
   1074c:	18c00017 	ldw	r3,0(r3)
   10750:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10754:	e0fffe17 	ldw	r3,-8(fp)
   10758:	e0bfff17 	ldw	r2,-4(fp)
   1075c:	18bff51e 	bne	r3,r2,10734 <_gp+0xffff4450>
    {
      *to++ = *from++;
    }
  }
}
   10760:	0001883a 	nop
   10764:	e037883a 	mov	sp,fp
   10768:	df000017 	ldw	fp,0(sp)
   1076c:	dec00104 	addi	sp,sp,4
   10770:	f800283a 	ret

00010774 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10774:	defffe04 	addi	sp,sp,-8
   10778:	dfc00115 	stw	ra,4(sp)
   1077c:	df000015 	stw	fp,0(sp)
   10780:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10784:	01800074 	movhi	r6,1
   10788:	3190c704 	addi	r6,r6,17180
   1078c:	01400074 	movhi	r5,1
   10790:	294b2e04 	addi	r5,r5,11448
   10794:	01000074 	movhi	r4,1
   10798:	2110c704 	addi	r4,r4,17180
   1079c:	001070c0 	call	1070c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   107a0:	01800074 	movhi	r6,1
   107a4:	31808c04 	addi	r6,r6,560
   107a8:	01400074 	movhi	r5,1
   107ac:	29400804 	addi	r5,r5,32
   107b0:	01000074 	movhi	r4,1
   107b4:	21000804 	addi	r4,r4,32
   107b8:	001070c0 	call	1070c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   107bc:	01800074 	movhi	r6,1
   107c0:	318b2e04 	addi	r6,r6,11448
   107c4:	01400074 	movhi	r5,1
   107c8:	294b2004 	addi	r5,r5,11392
   107cc:	01000074 	movhi	r4,1
   107d0:	210b2004 	addi	r4,r4,11392
   107d4:	001070c0 	call	1070c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   107d8:	001175c0 	call	1175c <alt_dcache_flush_all>
  alt_icache_flush_all();
   107dc:	00119480 	call	11948 <alt_icache_flush_all>
}
   107e0:	0001883a 	nop
   107e4:	e037883a 	mov	sp,fp
   107e8:	dfc00117 	ldw	ra,4(sp)
   107ec:	df000017 	ldw	fp,0(sp)
   107f0:	dec00204 	addi	sp,sp,8
   107f4:	f800283a 	ret

000107f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   107f8:	defffd04 	addi	sp,sp,-12
   107fc:	dfc00215 	stw	ra,8(sp)
   10800:	df000115 	stw	fp,4(sp)
   10804:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10808:	0009883a 	mov	r4,zero
   1080c:	00108d80 	call	108d8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   10810:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10814:	00109100 	call	10910 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10818:	01800074 	movhi	r6,1
   1081c:	318b2004 	addi	r6,r6,11392
   10820:	01400074 	movhi	r5,1
   10824:	294b2004 	addi	r5,r5,11392
   10828:	01000074 	movhi	r4,1
   1082c:	210b2004 	addi	r4,r4,11392
   10830:	0011cec0 	call	11cec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10834:	00118880 	call	11888 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   10838:	01000074 	movhi	r4,1
   1083c:	21063a04 	addi	r4,r4,6376
   10840:	00125300 	call	12530 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10844:	d0a5ac17 	ldw	r2,-26960(gp)
   10848:	d0e5ad17 	ldw	r3,-26956(gp)
   1084c:	d125ae17 	ldw	r4,-26952(gp)
   10850:	200d883a 	mov	r6,r4
   10854:	180b883a 	mov	r5,r3
   10858:	1009883a 	mov	r4,r2
   1085c:	001026c0 	call	1026c <main>
   10860:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10864:	01000044 	movi	r4,1
   10868:	00116840 	call	11684 <close>
  exit (result);
   1086c:	e13fff17 	ldw	r4,-4(fp)
   10870:	00125440 	call	12544 <exit>

00010874 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   10874:	defffd04 	addi	sp,sp,-12
   10878:	dfc00215 	stw	ra,8(sp)
   1087c:	df000115 	stw	fp,4(sp)
   10880:	df000104 	addi	fp,sp,4
   10884:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   10888:	e13fff17 	ldw	r4,-4(fp)
   1088c:	00114f00 	call	114f0 <alt_busy_sleep>
}
   10890:	e037883a 	mov	sp,fp
   10894:	dfc00117 	ldw	ra,4(sp)
   10898:	df000017 	ldw	fp,0(sp)
   1089c:	dec00204 	addi	sp,sp,8
   108a0:	f800283a 	ret

000108a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   108a4:	defffd04 	addi	sp,sp,-12
   108a8:	dfc00215 	stw	ra,8(sp)
   108ac:	df000115 	stw	fp,4(sp)
   108b0:	df000104 	addi	fp,sp,4
   108b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   108b8:	d1600504 	addi	r5,gp,-32748
   108bc:	e13fff17 	ldw	r4,-4(fp)
   108c0:	00117e40 	call	117e4 <alt_dev_llist_insert>
}
   108c4:	e037883a 	mov	sp,fp
   108c8:	dfc00117 	ldw	ra,4(sp)
   108cc:	df000017 	ldw	fp,0(sp)
   108d0:	dec00204 	addi	sp,sp,8
   108d4:	f800283a 	ret

000108d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   108d8:	defffd04 	addi	sp,sp,-12
   108dc:	dfc00215 	stw	ra,8(sp)
   108e0:	df000115 	stw	fp,4(sp)
   108e4:	df000104 	addi	fp,sp,4
   108e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   108ec:	00122140 	call	12214 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   108f0:	00800044 	movi	r2,1
   108f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   108f8:	0001883a 	nop
   108fc:	e037883a 	mov	sp,fp
   10900:	dfc00117 	ldw	ra,4(sp)
   10904:	df000017 	ldw	fp,0(sp)
   10908:	dec00204 	addi	sp,sp,8
   1090c:	f800283a 	ret

00010910 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10910:	defffe04 	addi	sp,sp,-8
   10914:	dfc00115 	stw	ra,4(sp)
   10918:	df000015 	stw	fp,0(sp)
   1091c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   10920:	01800044 	movi	r6,1
   10924:	000b883a 	mov	r5,zero
   10928:	01000074 	movhi	r4,1
   1092c:	210b3804 	addi	r4,r4,11488
   10930:	0010ac00 	call	10ac0 <altera_avalon_jtag_uart_init>
   10934:	01000074 	movhi	r4,1
   10938:	210b2e04 	addi	r4,r4,11448
   1093c:	00108a40 	call	108a4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   10940:	0001883a 	nop
}
   10944:	0001883a 	nop
   10948:	e037883a 	mov	sp,fp
   1094c:	dfc00117 	ldw	ra,4(sp)
   10950:	df000017 	ldw	fp,0(sp)
   10954:	dec00204 	addi	sp,sp,8
   10958:	f800283a 	ret

0001095c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1095c:	defffa04 	addi	sp,sp,-24
   10960:	dfc00515 	stw	ra,20(sp)
   10964:	df000415 	stw	fp,16(sp)
   10968:	df000404 	addi	fp,sp,16
   1096c:	e13ffd15 	stw	r4,-12(fp)
   10970:	e17ffe15 	stw	r5,-8(fp)
   10974:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10978:	e0bffd17 	ldw	r2,-12(fp)
   1097c:	10800017 	ldw	r2,0(r2)
   10980:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10984:	e0bffc17 	ldw	r2,-16(fp)
   10988:	10c00a04 	addi	r3,r2,40
   1098c:	e0bffd17 	ldw	r2,-12(fp)
   10990:	10800217 	ldw	r2,8(r2)
   10994:	100f883a 	mov	r7,r2
   10998:	e1bfff17 	ldw	r6,-4(fp)
   1099c:	e17ffe17 	ldw	r5,-8(fp)
   109a0:	1809883a 	mov	r4,r3
   109a4:	0010f840 	call	10f84 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   109a8:	e037883a 	mov	sp,fp
   109ac:	dfc00117 	ldw	ra,4(sp)
   109b0:	df000017 	ldw	fp,0(sp)
   109b4:	dec00204 	addi	sp,sp,8
   109b8:	f800283a 	ret

000109bc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   109bc:	defffa04 	addi	sp,sp,-24
   109c0:	dfc00515 	stw	ra,20(sp)
   109c4:	df000415 	stw	fp,16(sp)
   109c8:	df000404 	addi	fp,sp,16
   109cc:	e13ffd15 	stw	r4,-12(fp)
   109d0:	e17ffe15 	stw	r5,-8(fp)
   109d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   109d8:	e0bffd17 	ldw	r2,-12(fp)
   109dc:	10800017 	ldw	r2,0(r2)
   109e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   109e4:	e0bffc17 	ldw	r2,-16(fp)
   109e8:	10c00a04 	addi	r3,r2,40
   109ec:	e0bffd17 	ldw	r2,-12(fp)
   109f0:	10800217 	ldw	r2,8(r2)
   109f4:	100f883a 	mov	r7,r2
   109f8:	e1bfff17 	ldw	r6,-4(fp)
   109fc:	e17ffe17 	ldw	r5,-8(fp)
   10a00:	1809883a 	mov	r4,r3
   10a04:	00111a00 	call	111a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10a08:	e037883a 	mov	sp,fp
   10a0c:	dfc00117 	ldw	ra,4(sp)
   10a10:	df000017 	ldw	fp,0(sp)
   10a14:	dec00204 	addi	sp,sp,8
   10a18:	f800283a 	ret

00010a1c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   10a1c:	defffc04 	addi	sp,sp,-16
   10a20:	dfc00315 	stw	ra,12(sp)
   10a24:	df000215 	stw	fp,8(sp)
   10a28:	df000204 	addi	fp,sp,8
   10a2c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10a30:	e0bfff17 	ldw	r2,-4(fp)
   10a34:	10800017 	ldw	r2,0(r2)
   10a38:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   10a3c:	e0bffe17 	ldw	r2,-8(fp)
   10a40:	10c00a04 	addi	r3,r2,40
   10a44:	e0bfff17 	ldw	r2,-4(fp)
   10a48:	10800217 	ldw	r2,8(r2)
   10a4c:	100b883a 	mov	r5,r2
   10a50:	1809883a 	mov	r4,r3
   10a54:	0010e2c0 	call	10e2c <altera_avalon_jtag_uart_close>
}
   10a58:	e037883a 	mov	sp,fp
   10a5c:	dfc00117 	ldw	ra,4(sp)
   10a60:	df000017 	ldw	fp,0(sp)
   10a64:	dec00204 	addi	sp,sp,8
   10a68:	f800283a 	ret

00010a6c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   10a6c:	defffa04 	addi	sp,sp,-24
   10a70:	dfc00515 	stw	ra,20(sp)
   10a74:	df000415 	stw	fp,16(sp)
   10a78:	df000404 	addi	fp,sp,16
   10a7c:	e13ffd15 	stw	r4,-12(fp)
   10a80:	e17ffe15 	stw	r5,-8(fp)
   10a84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   10a88:	e0bffd17 	ldw	r2,-12(fp)
   10a8c:	10800017 	ldw	r2,0(r2)
   10a90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10a94:	e0bffc17 	ldw	r2,-16(fp)
   10a98:	10800a04 	addi	r2,r2,40
   10a9c:	e1bfff17 	ldw	r6,-4(fp)
   10aa0:	e17ffe17 	ldw	r5,-8(fp)
   10aa4:	1009883a 	mov	r4,r2
   10aa8:	0010e940 	call	10e94 <altera_avalon_jtag_uart_ioctl>
}
   10aac:	e037883a 	mov	sp,fp
   10ab0:	dfc00117 	ldw	ra,4(sp)
   10ab4:	df000017 	ldw	fp,0(sp)
   10ab8:	dec00204 	addi	sp,sp,8
   10abc:	f800283a 	ret

00010ac0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10ac0:	defffa04 	addi	sp,sp,-24
   10ac4:	dfc00515 	stw	ra,20(sp)
   10ac8:	df000415 	stw	fp,16(sp)
   10acc:	df000404 	addi	fp,sp,16
   10ad0:	e13ffd15 	stw	r4,-12(fp)
   10ad4:	e17ffe15 	stw	r5,-8(fp)
   10ad8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10adc:	e0bffd17 	ldw	r2,-12(fp)
   10ae0:	00c00044 	movi	r3,1
   10ae4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   10ae8:	e0bffd17 	ldw	r2,-12(fp)
   10aec:	10800017 	ldw	r2,0(r2)
   10af0:	10800104 	addi	r2,r2,4
   10af4:	1007883a 	mov	r3,r2
   10af8:	e0bffd17 	ldw	r2,-12(fp)
   10afc:	10800817 	ldw	r2,32(r2)
   10b00:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   10b04:	e0bffe17 	ldw	r2,-8(fp)
   10b08:	e0ffff17 	ldw	r3,-4(fp)
   10b0c:	d8000015 	stw	zero,0(sp)
   10b10:	e1fffd17 	ldw	r7,-12(fp)
   10b14:	01800074 	movhi	r6,1
   10b18:	3182e004 	addi	r6,r6,2944
   10b1c:	180b883a 	mov	r5,r3
   10b20:	1009883a 	mov	r4,r2
   10b24:	00119680 	call	11968 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10b28:	e0bffd17 	ldw	r2,-12(fp)
   10b2c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   10b30:	e0bffd17 	ldw	r2,-12(fp)
   10b34:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10b38:	d0e5b017 	ldw	r3,-26944(gp)
   10b3c:	e1fffd17 	ldw	r7,-12(fp)
   10b40:	01800074 	movhi	r6,1
   10b44:	31836304 	addi	r6,r6,3468
   10b48:	180b883a 	mov	r5,r3
   10b4c:	1009883a 	mov	r4,r2
   10b50:	00113c40 	call	113c4 <alt_alarm_start>
   10b54:	1000040e 	bge	r2,zero,10b68 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10b58:	e0fffd17 	ldw	r3,-12(fp)
   10b5c:	00a00034 	movhi	r2,32768
   10b60:	10bfffc4 	addi	r2,r2,-1
   10b64:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10b68:	0001883a 	nop
   10b6c:	e037883a 	mov	sp,fp
   10b70:	dfc00117 	ldw	ra,4(sp)
   10b74:	df000017 	ldw	fp,0(sp)
   10b78:	dec00204 	addi	sp,sp,8
   10b7c:	f800283a 	ret

00010b80 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   10b80:	defff804 	addi	sp,sp,-32
   10b84:	df000715 	stw	fp,28(sp)
   10b88:	df000704 	addi	fp,sp,28
   10b8c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   10b90:	e0bfff17 	ldw	r2,-4(fp)
   10b94:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   10b98:	e0bffb17 	ldw	r2,-20(fp)
   10b9c:	10800017 	ldw	r2,0(r2)
   10ba0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10ba4:	e0bffc17 	ldw	r2,-16(fp)
   10ba8:	10800104 	addi	r2,r2,4
   10bac:	10800037 	ldwio	r2,0(r2)
   10bb0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10bb4:	e0bffd17 	ldw	r2,-12(fp)
   10bb8:	1080c00c 	andi	r2,r2,768
   10bbc:	10006d26 	beq	r2,zero,10d74 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10bc0:	e0bffd17 	ldw	r2,-12(fp)
   10bc4:	1080400c 	andi	r2,r2,256
   10bc8:	10003526 	beq	r2,zero,10ca0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10bcc:	00800074 	movhi	r2,1
   10bd0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10bd4:	e0bffb17 	ldw	r2,-20(fp)
   10bd8:	10800a17 	ldw	r2,40(r2)
   10bdc:	10800044 	addi	r2,r2,1
   10be0:	1081ffcc 	andi	r2,r2,2047
   10be4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   10be8:	e0bffb17 	ldw	r2,-20(fp)
   10bec:	10c00b17 	ldw	r3,44(r2)
   10bf0:	e0bffe17 	ldw	r2,-8(fp)
   10bf4:	18801526 	beq	r3,r2,10c4c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10bf8:	e0bffc17 	ldw	r2,-16(fp)
   10bfc:	10800037 	ldwio	r2,0(r2)
   10c00:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10c04:	e0bff917 	ldw	r2,-28(fp)
   10c08:	10a0000c 	andi	r2,r2,32768
   10c0c:	10001126 	beq	r2,zero,10c54 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10c10:	e0bffb17 	ldw	r2,-20(fp)
   10c14:	10800a17 	ldw	r2,40(r2)
   10c18:	e0fff917 	ldw	r3,-28(fp)
   10c1c:	1809883a 	mov	r4,r3
   10c20:	e0fffb17 	ldw	r3,-20(fp)
   10c24:	1885883a 	add	r2,r3,r2
   10c28:	10800e04 	addi	r2,r2,56
   10c2c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10c30:	e0bffb17 	ldw	r2,-20(fp)
   10c34:	10800a17 	ldw	r2,40(r2)
   10c38:	10800044 	addi	r2,r2,1
   10c3c:	10c1ffcc 	andi	r3,r2,2047
   10c40:	e0bffb17 	ldw	r2,-20(fp)
   10c44:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   10c48:	003fe206 	br	10bd4 <_gp+0xffff48f0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   10c4c:	0001883a 	nop
   10c50:	00000106 	br	10c58 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   10c54:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10c58:	e0bff917 	ldw	r2,-28(fp)
   10c5c:	10bfffec 	andhi	r2,r2,65535
   10c60:	10000f26 	beq	r2,zero,10ca0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10c64:	e0bffb17 	ldw	r2,-20(fp)
   10c68:	10c00817 	ldw	r3,32(r2)
   10c6c:	00bfff84 	movi	r2,-2
   10c70:	1886703a 	and	r3,r3,r2
   10c74:	e0bffb17 	ldw	r2,-20(fp)
   10c78:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10c7c:	e0bffc17 	ldw	r2,-16(fp)
   10c80:	10800104 	addi	r2,r2,4
   10c84:	1007883a 	mov	r3,r2
   10c88:	e0bffb17 	ldw	r2,-20(fp)
   10c8c:	10800817 	ldw	r2,32(r2)
   10c90:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10c94:	e0bffc17 	ldw	r2,-16(fp)
   10c98:	10800104 	addi	r2,r2,4
   10c9c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10ca0:	e0bffd17 	ldw	r2,-12(fp)
   10ca4:	1080800c 	andi	r2,r2,512
   10ca8:	103fbe26 	beq	r2,zero,10ba4 <_gp+0xffff48c0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10cac:	e0bffd17 	ldw	r2,-12(fp)
   10cb0:	1004d43a 	srli	r2,r2,16
   10cb4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   10cb8:	00001406 	br	10d0c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10cbc:	e0bffc17 	ldw	r2,-16(fp)
   10cc0:	e0fffb17 	ldw	r3,-20(fp)
   10cc4:	18c00d17 	ldw	r3,52(r3)
   10cc8:	e13ffb17 	ldw	r4,-20(fp)
   10ccc:	20c7883a 	add	r3,r4,r3
   10cd0:	18c20e04 	addi	r3,r3,2104
   10cd4:	18c00003 	ldbu	r3,0(r3)
   10cd8:	18c03fcc 	andi	r3,r3,255
   10cdc:	18c0201c 	xori	r3,r3,128
   10ce0:	18ffe004 	addi	r3,r3,-128
   10ce4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10ce8:	e0bffb17 	ldw	r2,-20(fp)
   10cec:	10800d17 	ldw	r2,52(r2)
   10cf0:	10800044 	addi	r2,r2,1
   10cf4:	10c1ffcc 	andi	r3,r2,2047
   10cf8:	e0bffb17 	ldw	r2,-20(fp)
   10cfc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10d00:	e0bffa17 	ldw	r2,-24(fp)
   10d04:	10bfffc4 	addi	r2,r2,-1
   10d08:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10d0c:	e0bffa17 	ldw	r2,-24(fp)
   10d10:	10000526 	beq	r2,zero,10d28 <altera_avalon_jtag_uart_irq+0x1a8>
   10d14:	e0bffb17 	ldw	r2,-20(fp)
   10d18:	10c00d17 	ldw	r3,52(r2)
   10d1c:	e0bffb17 	ldw	r2,-20(fp)
   10d20:	10800c17 	ldw	r2,48(r2)
   10d24:	18bfe51e 	bne	r3,r2,10cbc <_gp+0xffff49d8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   10d28:	e0bffa17 	ldw	r2,-24(fp)
   10d2c:	103f9d26 	beq	r2,zero,10ba4 <_gp+0xffff48c0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10d30:	e0bffb17 	ldw	r2,-20(fp)
   10d34:	10c00817 	ldw	r3,32(r2)
   10d38:	00bfff44 	movi	r2,-3
   10d3c:	1886703a 	and	r3,r3,r2
   10d40:	e0bffb17 	ldw	r2,-20(fp)
   10d44:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10d48:	e0bffb17 	ldw	r2,-20(fp)
   10d4c:	10800017 	ldw	r2,0(r2)
   10d50:	10800104 	addi	r2,r2,4
   10d54:	1007883a 	mov	r3,r2
   10d58:	e0bffb17 	ldw	r2,-20(fp)
   10d5c:	10800817 	ldw	r2,32(r2)
   10d60:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10d64:	e0bffc17 	ldw	r2,-16(fp)
   10d68:	10800104 	addi	r2,r2,4
   10d6c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   10d70:	003f8c06 	br	10ba4 <_gp+0xffff48c0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   10d74:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   10d78:	0001883a 	nop
   10d7c:	e037883a 	mov	sp,fp
   10d80:	df000017 	ldw	fp,0(sp)
   10d84:	dec00104 	addi	sp,sp,4
   10d88:	f800283a 	ret

00010d8c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10d8c:	defff804 	addi	sp,sp,-32
   10d90:	df000715 	stw	fp,28(sp)
   10d94:	df000704 	addi	fp,sp,28
   10d98:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10d9c:	e0bffb17 	ldw	r2,-20(fp)
   10da0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10da4:	e0bff917 	ldw	r2,-28(fp)
   10da8:	10800017 	ldw	r2,0(r2)
   10dac:	10800104 	addi	r2,r2,4
   10db0:	10800037 	ldwio	r2,0(r2)
   10db4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   10db8:	e0bffa17 	ldw	r2,-24(fp)
   10dbc:	1081000c 	andi	r2,r2,1024
   10dc0:	10000b26 	beq	r2,zero,10df0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10dc4:	e0bff917 	ldw	r2,-28(fp)
   10dc8:	10800017 	ldw	r2,0(r2)
   10dcc:	10800104 	addi	r2,r2,4
   10dd0:	1007883a 	mov	r3,r2
   10dd4:	e0bff917 	ldw	r2,-28(fp)
   10dd8:	10800817 	ldw	r2,32(r2)
   10ddc:	10810014 	ori	r2,r2,1024
   10de0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10de4:	e0bff917 	ldw	r2,-28(fp)
   10de8:	10000915 	stw	zero,36(r2)
   10dec:	00000a06 	br	10e18 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   10df0:	e0bff917 	ldw	r2,-28(fp)
   10df4:	10c00917 	ldw	r3,36(r2)
   10df8:	00a00034 	movhi	r2,32768
   10dfc:	10bfff04 	addi	r2,r2,-4
   10e00:	10c00536 	bltu	r2,r3,10e18 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10e04:	e0bff917 	ldw	r2,-28(fp)
   10e08:	10800917 	ldw	r2,36(r2)
   10e0c:	10c00044 	addi	r3,r2,1
   10e10:	e0bff917 	ldw	r2,-28(fp)
   10e14:	10c00915 	stw	r3,36(r2)
   10e18:	d0a5b017 	ldw	r2,-26944(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10e1c:	e037883a 	mov	sp,fp
   10e20:	df000017 	ldw	fp,0(sp)
   10e24:	dec00104 	addi	sp,sp,4
   10e28:	f800283a 	ret

00010e2c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10e2c:	defffd04 	addi	sp,sp,-12
   10e30:	df000215 	stw	fp,8(sp)
   10e34:	df000204 	addi	fp,sp,8
   10e38:	e13ffe15 	stw	r4,-8(fp)
   10e3c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10e40:	00000506 	br	10e58 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10e44:	e0bfff17 	ldw	r2,-4(fp)
   10e48:	1090000c 	andi	r2,r2,16384
   10e4c:	10000226 	beq	r2,zero,10e58 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10e50:	00bffd44 	movi	r2,-11
   10e54:	00000b06 	br	10e84 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10e58:	e0bffe17 	ldw	r2,-8(fp)
   10e5c:	10c00d17 	ldw	r3,52(r2)
   10e60:	e0bffe17 	ldw	r2,-8(fp)
   10e64:	10800c17 	ldw	r2,48(r2)
   10e68:	18800526 	beq	r3,r2,10e80 <altera_avalon_jtag_uart_close+0x54>
   10e6c:	e0bffe17 	ldw	r2,-8(fp)
   10e70:	10c00917 	ldw	r3,36(r2)
   10e74:	e0bffe17 	ldw	r2,-8(fp)
   10e78:	10800117 	ldw	r2,4(r2)
   10e7c:	18bff136 	bltu	r3,r2,10e44 <_gp+0xffff4b60>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   10e80:	0005883a 	mov	r2,zero
}
   10e84:	e037883a 	mov	sp,fp
   10e88:	df000017 	ldw	fp,0(sp)
   10e8c:	dec00104 	addi	sp,sp,4
   10e90:	f800283a 	ret

00010e94 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10e94:	defffa04 	addi	sp,sp,-24
   10e98:	df000515 	stw	fp,20(sp)
   10e9c:	df000504 	addi	fp,sp,20
   10ea0:	e13ffd15 	stw	r4,-12(fp)
   10ea4:	e17ffe15 	stw	r5,-8(fp)
   10ea8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10eac:	00bff9c4 	movi	r2,-25
   10eb0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10eb4:	e0bffe17 	ldw	r2,-8(fp)
   10eb8:	10da8060 	cmpeqi	r3,r2,27137
   10ebc:	1800031e 	bne	r3,zero,10ecc <altera_avalon_jtag_uart_ioctl+0x38>
   10ec0:	109a80a0 	cmpeqi	r2,r2,27138
   10ec4:	1000181e 	bne	r2,zero,10f28 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   10ec8:	00002906 	br	10f70 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10ecc:	e0bffd17 	ldw	r2,-12(fp)
   10ed0:	10c00117 	ldw	r3,4(r2)
   10ed4:	00a00034 	movhi	r2,32768
   10ed8:	10bfffc4 	addi	r2,r2,-1
   10edc:	18802126 	beq	r3,r2,10f64 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   10ee0:	e0bfff17 	ldw	r2,-4(fp)
   10ee4:	10800017 	ldw	r2,0(r2)
   10ee8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10eec:	e0bffc17 	ldw	r2,-16(fp)
   10ef0:	10800090 	cmplti	r2,r2,2
   10ef4:	1000061e 	bne	r2,zero,10f10 <altera_avalon_jtag_uart_ioctl+0x7c>
   10ef8:	e0fffc17 	ldw	r3,-16(fp)
   10efc:	00a00034 	movhi	r2,32768
   10f00:	10bfffc4 	addi	r2,r2,-1
   10f04:	18800226 	beq	r3,r2,10f10 <altera_avalon_jtag_uart_ioctl+0x7c>
   10f08:	e0bffc17 	ldw	r2,-16(fp)
   10f0c:	00000206 	br	10f18 <altera_avalon_jtag_uart_ioctl+0x84>
   10f10:	00a00034 	movhi	r2,32768
   10f14:	10bfff84 	addi	r2,r2,-2
   10f18:	e0fffd17 	ldw	r3,-12(fp)
   10f1c:	18800115 	stw	r2,4(r3)
      rc = 0;
   10f20:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10f24:	00000f06 	br	10f64 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10f28:	e0bffd17 	ldw	r2,-12(fp)
   10f2c:	10c00117 	ldw	r3,4(r2)
   10f30:	00a00034 	movhi	r2,32768
   10f34:	10bfffc4 	addi	r2,r2,-1
   10f38:	18800c26 	beq	r3,r2,10f6c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10f3c:	e0bffd17 	ldw	r2,-12(fp)
   10f40:	10c00917 	ldw	r3,36(r2)
   10f44:	e0bffd17 	ldw	r2,-12(fp)
   10f48:	10800117 	ldw	r2,4(r2)
   10f4c:	1885803a 	cmpltu	r2,r3,r2
   10f50:	10c03fcc 	andi	r3,r2,255
   10f54:	e0bfff17 	ldw	r2,-4(fp)
   10f58:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10f5c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10f60:	00000206 	br	10f6c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   10f64:	0001883a 	nop
   10f68:	00000106 	br	10f70 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   10f6c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10f70:	e0bffb17 	ldw	r2,-20(fp)
}
   10f74:	e037883a 	mov	sp,fp
   10f78:	df000017 	ldw	fp,0(sp)
   10f7c:	dec00104 	addi	sp,sp,4
   10f80:	f800283a 	ret

00010f84 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10f84:	defff304 	addi	sp,sp,-52
   10f88:	dfc00c15 	stw	ra,48(sp)
   10f8c:	df000b15 	stw	fp,44(sp)
   10f90:	df000b04 	addi	fp,sp,44
   10f94:	e13ffc15 	stw	r4,-16(fp)
   10f98:	e17ffd15 	stw	r5,-12(fp)
   10f9c:	e1bffe15 	stw	r6,-8(fp)
   10fa0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   10fa4:	e0bffd17 	ldw	r2,-12(fp)
   10fa8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10fac:	00004706 	br	110cc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10fb0:	e0bffc17 	ldw	r2,-16(fp)
   10fb4:	10800a17 	ldw	r2,40(r2)
   10fb8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   10fbc:	e0bffc17 	ldw	r2,-16(fp)
   10fc0:	10800b17 	ldw	r2,44(r2)
   10fc4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   10fc8:	e0fff717 	ldw	r3,-36(fp)
   10fcc:	e0bff817 	ldw	r2,-32(fp)
   10fd0:	18800536 	bltu	r3,r2,10fe8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10fd4:	e0fff717 	ldw	r3,-36(fp)
   10fd8:	e0bff817 	ldw	r2,-32(fp)
   10fdc:	1885c83a 	sub	r2,r3,r2
   10fe0:	e0bff615 	stw	r2,-40(fp)
   10fe4:	00000406 	br	10ff8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10fe8:	00c20004 	movi	r3,2048
   10fec:	e0bff817 	ldw	r2,-32(fp)
   10ff0:	1885c83a 	sub	r2,r3,r2
   10ff4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10ff8:	e0bff617 	ldw	r2,-40(fp)
   10ffc:	10001e26 	beq	r2,zero,11078 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   11000:	e0fffe17 	ldw	r3,-8(fp)
   11004:	e0bff617 	ldw	r2,-40(fp)
   11008:	1880022e 	bgeu	r3,r2,11014 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1100c:	e0bffe17 	ldw	r2,-8(fp)
   11010:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   11014:	e0bffc17 	ldw	r2,-16(fp)
   11018:	10c00e04 	addi	r3,r2,56
   1101c:	e0bff817 	ldw	r2,-32(fp)
   11020:	1885883a 	add	r2,r3,r2
   11024:	e1bff617 	ldw	r6,-40(fp)
   11028:	100b883a 	mov	r5,r2
   1102c:	e13ff517 	ldw	r4,-44(fp)
   11030:	00125f80 	call	125f8 <memcpy>
      ptr   += n;
   11034:	e0fff517 	ldw	r3,-44(fp)
   11038:	e0bff617 	ldw	r2,-40(fp)
   1103c:	1885883a 	add	r2,r3,r2
   11040:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   11044:	e0fffe17 	ldw	r3,-8(fp)
   11048:	e0bff617 	ldw	r2,-40(fp)
   1104c:	1885c83a 	sub	r2,r3,r2
   11050:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11054:	e0fff817 	ldw	r3,-32(fp)
   11058:	e0bff617 	ldw	r2,-40(fp)
   1105c:	1885883a 	add	r2,r3,r2
   11060:	10c1ffcc 	andi	r3,r2,2047
   11064:	e0bffc17 	ldw	r2,-16(fp)
   11068:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1106c:	e0bffe17 	ldw	r2,-8(fp)
   11070:	00bfcf16 	blt	zero,r2,10fb0 <_gp+0xffff4ccc>
   11074:	00000106 	br	1107c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   11078:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1107c:	e0fff517 	ldw	r3,-44(fp)
   11080:	e0bffd17 	ldw	r2,-12(fp)
   11084:	1880141e 	bne	r3,r2,110d8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   11088:	e0bfff17 	ldw	r2,-4(fp)
   1108c:	1090000c 	andi	r2,r2,16384
   11090:	1000131e 	bne	r2,zero,110e0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   11094:	0001883a 	nop
   11098:	e0bffc17 	ldw	r2,-16(fp)
   1109c:	10c00a17 	ldw	r3,40(r2)
   110a0:	e0bff717 	ldw	r2,-36(fp)
   110a4:	1880051e 	bne	r3,r2,110bc <altera_avalon_jtag_uart_read+0x138>
   110a8:	e0bffc17 	ldw	r2,-16(fp)
   110ac:	10c00917 	ldw	r3,36(r2)
   110b0:	e0bffc17 	ldw	r2,-16(fp)
   110b4:	10800117 	ldw	r2,4(r2)
   110b8:	18bff736 	bltu	r3,r2,11098 <_gp+0xffff4db4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   110bc:	e0bffc17 	ldw	r2,-16(fp)
   110c0:	10c00a17 	ldw	r3,40(r2)
   110c4:	e0bff717 	ldw	r2,-36(fp)
   110c8:	18800726 	beq	r3,r2,110e8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   110cc:	e0bffe17 	ldw	r2,-8(fp)
   110d0:	00bfb716 	blt	zero,r2,10fb0 <_gp+0xffff4ccc>
   110d4:	00000506 	br	110ec <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   110d8:	0001883a 	nop
   110dc:	00000306 	br	110ec <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   110e0:	0001883a 	nop
   110e4:	00000106 	br	110ec <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   110e8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   110ec:	e0fff517 	ldw	r3,-44(fp)
   110f0:	e0bffd17 	ldw	r2,-12(fp)
   110f4:	18801826 	beq	r3,r2,11158 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   110f8:	0005303a 	rdctl	r2,status
   110fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11100:	e0fffb17 	ldw	r3,-20(fp)
   11104:	00bfff84 	movi	r2,-2
   11108:	1884703a 	and	r2,r3,r2
   1110c:	1001703a 	wrctl	status,r2
  
  return context;
   11110:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   11114:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11118:	e0bffc17 	ldw	r2,-16(fp)
   1111c:	10800817 	ldw	r2,32(r2)
   11120:	10c00054 	ori	r3,r2,1
   11124:	e0bffc17 	ldw	r2,-16(fp)
   11128:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1112c:	e0bffc17 	ldw	r2,-16(fp)
   11130:	10800017 	ldw	r2,0(r2)
   11134:	10800104 	addi	r2,r2,4
   11138:	1007883a 	mov	r3,r2
   1113c:	e0bffc17 	ldw	r2,-16(fp)
   11140:	10800817 	ldw	r2,32(r2)
   11144:	18800035 	stwio	r2,0(r3)
   11148:	e0bffa17 	ldw	r2,-24(fp)
   1114c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11150:	e0bff917 	ldw	r2,-28(fp)
   11154:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   11158:	e0fff517 	ldw	r3,-44(fp)
   1115c:	e0bffd17 	ldw	r2,-12(fp)
   11160:	18800426 	beq	r3,r2,11174 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   11164:	e0fff517 	ldw	r3,-44(fp)
   11168:	e0bffd17 	ldw	r2,-12(fp)
   1116c:	1885c83a 	sub	r2,r3,r2
   11170:	00000606 	br	1118c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   11174:	e0bfff17 	ldw	r2,-4(fp)
   11178:	1090000c 	andi	r2,r2,16384
   1117c:	10000226 	beq	r2,zero,11188 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   11180:	00bffd44 	movi	r2,-11
   11184:	00000106 	br	1118c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   11188:	00bffec4 	movi	r2,-5
}
   1118c:	e037883a 	mov	sp,fp
   11190:	dfc00117 	ldw	ra,4(sp)
   11194:	df000017 	ldw	fp,0(sp)
   11198:	dec00204 	addi	sp,sp,8
   1119c:	f800283a 	ret

000111a0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   111a0:	defff304 	addi	sp,sp,-52
   111a4:	dfc00c15 	stw	ra,48(sp)
   111a8:	df000b15 	stw	fp,44(sp)
   111ac:	df000b04 	addi	fp,sp,44
   111b0:	e13ffc15 	stw	r4,-16(fp)
   111b4:	e17ffd15 	stw	r5,-12(fp)
   111b8:	e1bffe15 	stw	r6,-8(fp)
   111bc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   111c0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   111c4:	e0bffd17 	ldw	r2,-12(fp)
   111c8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   111cc:	00003706 	br	112ac <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   111d0:	e0bffc17 	ldw	r2,-16(fp)
   111d4:	10800c17 	ldw	r2,48(r2)
   111d8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   111dc:	e0bffc17 	ldw	r2,-16(fp)
   111e0:	10800d17 	ldw	r2,52(r2)
   111e4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   111e8:	e0fff917 	ldw	r3,-28(fp)
   111ec:	e0bff517 	ldw	r2,-44(fp)
   111f0:	1880062e 	bgeu	r3,r2,1120c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   111f4:	e0fff517 	ldw	r3,-44(fp)
   111f8:	e0bff917 	ldw	r2,-28(fp)
   111fc:	1885c83a 	sub	r2,r3,r2
   11200:	10bfffc4 	addi	r2,r2,-1
   11204:	e0bff615 	stw	r2,-40(fp)
   11208:	00000b06 	br	11238 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1120c:	e0bff517 	ldw	r2,-44(fp)
   11210:	10000526 	beq	r2,zero,11228 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   11214:	00c20004 	movi	r3,2048
   11218:	e0bff917 	ldw	r2,-28(fp)
   1121c:	1885c83a 	sub	r2,r3,r2
   11220:	e0bff615 	stw	r2,-40(fp)
   11224:	00000406 	br	11238 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   11228:	00c1ffc4 	movi	r3,2047
   1122c:	e0bff917 	ldw	r2,-28(fp)
   11230:	1885c83a 	sub	r2,r3,r2
   11234:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11238:	e0bff617 	ldw	r2,-40(fp)
   1123c:	10001e26 	beq	r2,zero,112b8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   11240:	e0fffe17 	ldw	r3,-8(fp)
   11244:	e0bff617 	ldw	r2,-40(fp)
   11248:	1880022e 	bgeu	r3,r2,11254 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1124c:	e0bffe17 	ldw	r2,-8(fp)
   11250:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   11254:	e0bffc17 	ldw	r2,-16(fp)
   11258:	10c20e04 	addi	r3,r2,2104
   1125c:	e0bff917 	ldw	r2,-28(fp)
   11260:	1885883a 	add	r2,r3,r2
   11264:	e1bff617 	ldw	r6,-40(fp)
   11268:	e17ffd17 	ldw	r5,-12(fp)
   1126c:	1009883a 	mov	r4,r2
   11270:	00125f80 	call	125f8 <memcpy>
      ptr   += n;
   11274:	e0fffd17 	ldw	r3,-12(fp)
   11278:	e0bff617 	ldw	r2,-40(fp)
   1127c:	1885883a 	add	r2,r3,r2
   11280:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   11284:	e0fffe17 	ldw	r3,-8(fp)
   11288:	e0bff617 	ldw	r2,-40(fp)
   1128c:	1885c83a 	sub	r2,r3,r2
   11290:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11294:	e0fff917 	ldw	r3,-28(fp)
   11298:	e0bff617 	ldw	r2,-40(fp)
   1129c:	1885883a 	add	r2,r3,r2
   112a0:	10c1ffcc 	andi	r3,r2,2047
   112a4:	e0bffc17 	ldw	r2,-16(fp)
   112a8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   112ac:	e0bffe17 	ldw	r2,-8(fp)
   112b0:	00bfc716 	blt	zero,r2,111d0 <_gp+0xffff4eec>
   112b4:	00000106 	br	112bc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   112b8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   112bc:	0005303a 	rdctl	r2,status
   112c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   112c4:	e0fffb17 	ldw	r3,-20(fp)
   112c8:	00bfff84 	movi	r2,-2
   112cc:	1884703a 	and	r2,r3,r2
   112d0:	1001703a 	wrctl	status,r2
  
  return context;
   112d4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   112d8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   112dc:	e0bffc17 	ldw	r2,-16(fp)
   112e0:	10800817 	ldw	r2,32(r2)
   112e4:	10c00094 	ori	r3,r2,2
   112e8:	e0bffc17 	ldw	r2,-16(fp)
   112ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   112f0:	e0bffc17 	ldw	r2,-16(fp)
   112f4:	10800017 	ldw	r2,0(r2)
   112f8:	10800104 	addi	r2,r2,4
   112fc:	1007883a 	mov	r3,r2
   11300:	e0bffc17 	ldw	r2,-16(fp)
   11304:	10800817 	ldw	r2,32(r2)
   11308:	18800035 	stwio	r2,0(r3)
   1130c:	e0bffa17 	ldw	r2,-24(fp)
   11310:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11314:	e0bff817 	ldw	r2,-32(fp)
   11318:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1131c:	e0bffe17 	ldw	r2,-8(fp)
   11320:	0080100e 	bge	zero,r2,11364 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   11324:	e0bfff17 	ldw	r2,-4(fp)
   11328:	1090000c 	andi	r2,r2,16384
   1132c:	1000101e 	bne	r2,zero,11370 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   11330:	0001883a 	nop
   11334:	e0bffc17 	ldw	r2,-16(fp)
   11338:	10c00d17 	ldw	r3,52(r2)
   1133c:	e0bff517 	ldw	r2,-44(fp)
   11340:	1880051e 	bne	r3,r2,11358 <altera_avalon_jtag_uart_write+0x1b8>
   11344:	e0bffc17 	ldw	r2,-16(fp)
   11348:	10c00917 	ldw	r3,36(r2)
   1134c:	e0bffc17 	ldw	r2,-16(fp)
   11350:	10800117 	ldw	r2,4(r2)
   11354:	18bff736 	bltu	r3,r2,11334 <_gp+0xffff5050>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   11358:	e0bffc17 	ldw	r2,-16(fp)
   1135c:	10800917 	ldw	r2,36(r2)
   11360:	1000051e 	bne	r2,zero,11378 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   11364:	e0bffe17 	ldw	r2,-8(fp)
   11368:	00bfd016 	blt	zero,r2,112ac <_gp+0xffff4fc8>
   1136c:	00000306 	br	1137c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   11370:	0001883a 	nop
   11374:	00000106 	br	1137c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   11378:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1137c:	e0fffd17 	ldw	r3,-12(fp)
   11380:	e0bff717 	ldw	r2,-36(fp)
   11384:	18800426 	beq	r3,r2,11398 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   11388:	e0fffd17 	ldw	r3,-12(fp)
   1138c:	e0bff717 	ldw	r2,-36(fp)
   11390:	1885c83a 	sub	r2,r3,r2
   11394:	00000606 	br	113b0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   11398:	e0bfff17 	ldw	r2,-4(fp)
   1139c:	1090000c 	andi	r2,r2,16384
   113a0:	10000226 	beq	r2,zero,113ac <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   113a4:	00bffd44 	movi	r2,-11
   113a8:	00000106 	br	113b0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   113ac:	00bffec4 	movi	r2,-5
}
   113b0:	e037883a 	mov	sp,fp
   113b4:	dfc00117 	ldw	ra,4(sp)
   113b8:	df000017 	ldw	fp,0(sp)
   113bc:	dec00204 	addi	sp,sp,8
   113c0:	f800283a 	ret

000113c4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   113c4:	defff504 	addi	sp,sp,-44
   113c8:	df000a15 	stw	fp,40(sp)
   113cc:	df000a04 	addi	fp,sp,40
   113d0:	e13ffc15 	stw	r4,-16(fp)
   113d4:	e17ffd15 	stw	r5,-12(fp)
   113d8:	e1bffe15 	stw	r6,-8(fp)
   113dc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   113e0:	e03ff615 	stw	zero,-40(fp)
   113e4:	d0a5b017 	ldw	r2,-26944(gp)
  
  if (alt_ticks_per_second ())
   113e8:	10003c26 	beq	r2,zero,114dc <alt_alarm_start+0x118>
  {
    if (alarm)
   113ec:	e0bffc17 	ldw	r2,-16(fp)
   113f0:	10003826 	beq	r2,zero,114d4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   113f4:	e0bffc17 	ldw	r2,-16(fp)
   113f8:	e0fffe17 	ldw	r3,-8(fp)
   113fc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   11400:	e0bffc17 	ldw	r2,-16(fp)
   11404:	e0ffff17 	ldw	r3,-4(fp)
   11408:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1140c:	0005303a 	rdctl	r2,status
   11410:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11414:	e0fff917 	ldw	r3,-28(fp)
   11418:	00bfff84 	movi	r2,-2
   1141c:	1884703a 	and	r2,r3,r2
   11420:	1001703a 	wrctl	status,r2
  
  return context;
   11424:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   11428:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1142c:	d0a5b117 	ldw	r2,-26940(gp)
      
      current_nticks = alt_nticks();
   11430:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   11434:	e0fffd17 	ldw	r3,-12(fp)
   11438:	e0bff617 	ldw	r2,-40(fp)
   1143c:	1885883a 	add	r2,r3,r2
   11440:	10c00044 	addi	r3,r2,1
   11444:	e0bffc17 	ldw	r2,-16(fp)
   11448:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1144c:	e0bffc17 	ldw	r2,-16(fp)
   11450:	10c00217 	ldw	r3,8(r2)
   11454:	e0bff617 	ldw	r2,-40(fp)
   11458:	1880042e 	bgeu	r3,r2,1146c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1145c:	e0bffc17 	ldw	r2,-16(fp)
   11460:	00c00044 	movi	r3,1
   11464:	10c00405 	stb	r3,16(r2)
   11468:	00000206 	br	11474 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1146c:	e0bffc17 	ldw	r2,-16(fp)
   11470:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11474:	e0bffc17 	ldw	r2,-16(fp)
   11478:	d0e00a04 	addi	r3,gp,-32728
   1147c:	e0fffa15 	stw	r3,-24(fp)
   11480:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11484:	e0bffb17 	ldw	r2,-20(fp)
   11488:	e0fffa17 	ldw	r3,-24(fp)
   1148c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11490:	e0bffa17 	ldw	r2,-24(fp)
   11494:	10c00017 	ldw	r3,0(r2)
   11498:	e0bffb17 	ldw	r2,-20(fp)
   1149c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   114a0:	e0bffa17 	ldw	r2,-24(fp)
   114a4:	10800017 	ldw	r2,0(r2)
   114a8:	e0fffb17 	ldw	r3,-20(fp)
   114ac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   114b0:	e0bffa17 	ldw	r2,-24(fp)
   114b4:	e0fffb17 	ldw	r3,-20(fp)
   114b8:	10c00015 	stw	r3,0(r2)
   114bc:	e0bff817 	ldw	r2,-32(fp)
   114c0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   114c4:	e0bff717 	ldw	r2,-36(fp)
   114c8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   114cc:	0005883a 	mov	r2,zero
   114d0:	00000306 	br	114e0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   114d4:	00bffa84 	movi	r2,-22
   114d8:	00000106 	br	114e0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   114dc:	00bfde84 	movi	r2,-134
  }
}
   114e0:	e037883a 	mov	sp,fp
   114e4:	df000017 	ldw	fp,0(sp)
   114e8:	dec00104 	addi	sp,sp,4
   114ec:	f800283a 	ret

000114f0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   114f0:	defffa04 	addi	sp,sp,-24
   114f4:	dfc00515 	stw	ra,20(sp)
   114f8:	df000415 	stw	fp,16(sp)
   114fc:	df000404 	addi	fp,sp,16
   11500:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   11504:	00800244 	movi	r2,9
   11508:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   1150c:	014003f4 	movhi	r5,15
   11510:	29509004 	addi	r5,r5,16960
   11514:	e13ffd17 	ldw	r4,-12(fp)
   11518:	0012c240 	call	12c24 <__mulsi3>
   1151c:	100b883a 	mov	r5,r2
   11520:	0100bef4 	movhi	r4,763
   11524:	213c2004 	addi	r4,r4,-3968
   11528:	0012b680 	call	12b68 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1152c:	100b883a 	mov	r5,r2
   11530:	01200034 	movhi	r4,32768
   11534:	213fffc4 	addi	r4,r4,-1
   11538:	0012b680 	call	12b68 <__udivsi3>
   1153c:	100b883a 	mov	r5,r2
   11540:	e13fff17 	ldw	r4,-4(fp)
   11544:	0012b680 	call	12b68 <__udivsi3>
   11548:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1154c:	e0bffe17 	ldw	r2,-8(fp)
   11550:	10002a26 	beq	r2,zero,115fc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   11554:	e03ffc15 	stw	zero,-16(fp)
   11558:	00001706 	br	115b8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1155c:	00a00034 	movhi	r2,32768
   11560:	10bfffc4 	addi	r2,r2,-1
   11564:	10bfffc4 	addi	r2,r2,-1
   11568:	103ffe1e 	bne	r2,zero,11564 <_gp+0xffff5280>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   1156c:	014003f4 	movhi	r5,15
   11570:	29509004 	addi	r5,r5,16960
   11574:	e13ffd17 	ldw	r4,-12(fp)
   11578:	0012c240 	call	12c24 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   1157c:	100b883a 	mov	r5,r2
   11580:	0100bef4 	movhi	r4,763
   11584:	213c2004 	addi	r4,r4,-3968
   11588:	0012b680 	call	12b68 <__udivsi3>
   1158c:	100b883a 	mov	r5,r2
   11590:	01200034 	movhi	r4,32768
   11594:	213fffc4 	addi	r4,r4,-1
   11598:	0012b680 	call	12b68 <__udivsi3>
   1159c:	1007883a 	mov	r3,r2
   115a0:	e0bfff17 	ldw	r2,-4(fp)
   115a4:	10c5c83a 	sub	r2,r2,r3
   115a8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   115ac:	e0bffc17 	ldw	r2,-16(fp)
   115b0:	10800044 	addi	r2,r2,1
   115b4:	e0bffc15 	stw	r2,-16(fp)
   115b8:	e0fffc17 	ldw	r3,-16(fp)
   115bc:	e0bffe17 	ldw	r2,-8(fp)
   115c0:	18bfe616 	blt	r3,r2,1155c <_gp+0xffff5278>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   115c4:	014003f4 	movhi	r5,15
   115c8:	29509004 	addi	r5,r5,16960
   115cc:	e13ffd17 	ldw	r4,-12(fp)
   115d0:	0012c240 	call	12c24 <__mulsi3>
   115d4:	100b883a 	mov	r5,r2
   115d8:	0100bef4 	movhi	r4,763
   115dc:	213c2004 	addi	r4,r4,-3968
   115e0:	0012b680 	call	12b68 <__udivsi3>
   115e4:	e17fff17 	ldw	r5,-4(fp)
   115e8:	1009883a 	mov	r4,r2
   115ec:	0012c240 	call	12c24 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   115f0:	10bfffc4 	addi	r2,r2,-1
   115f4:	103ffe1e 	bne	r2,zero,115f0 <_gp+0xffff530c>
   115f8:	00000d06 	br	11630 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   115fc:	014003f4 	movhi	r5,15
   11600:	29509004 	addi	r5,r5,16960
   11604:	e13ffd17 	ldw	r4,-12(fp)
   11608:	0012c240 	call	12c24 <__mulsi3>
   1160c:	100b883a 	mov	r5,r2
   11610:	0100bef4 	movhi	r4,763
   11614:	213c2004 	addi	r4,r4,-3968
   11618:	0012b680 	call	12b68 <__udivsi3>
   1161c:	e17fff17 	ldw	r5,-4(fp)
   11620:	1009883a 	mov	r4,r2
   11624:	0012c240 	call	12c24 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11628:	10bfffc4 	addi	r2,r2,-1
   1162c:	00bffe16 	blt	zero,r2,11628 <_gp+0xffff5344>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   11630:	0005883a 	mov	r2,zero
}
   11634:	e037883a 	mov	sp,fp
   11638:	dfc00117 	ldw	ra,4(sp)
   1163c:	df000017 	ldw	fp,0(sp)
   11640:	dec00204 	addi	sp,sp,8
   11644:	f800283a 	ret

00011648 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11648:	defffe04 	addi	sp,sp,-8
   1164c:	dfc00115 	stw	ra,4(sp)
   11650:	df000015 	stw	fp,0(sp)
   11654:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11658:	d0a00817 	ldw	r2,-32736(gp)
   1165c:	10000326 	beq	r2,zero,1166c <alt_get_errno+0x24>
   11660:	d0a00817 	ldw	r2,-32736(gp)
   11664:	103ee83a 	callr	r2
   11668:	00000106 	br	11670 <alt_get_errno+0x28>
   1166c:	d0a5b304 	addi	r2,gp,-26932
}
   11670:	e037883a 	mov	sp,fp
   11674:	dfc00117 	ldw	ra,4(sp)
   11678:	df000017 	ldw	fp,0(sp)
   1167c:	dec00204 	addi	sp,sp,8
   11680:	f800283a 	ret

00011684 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11684:	defffb04 	addi	sp,sp,-20
   11688:	dfc00415 	stw	ra,16(sp)
   1168c:	df000315 	stw	fp,12(sp)
   11690:	df000304 	addi	fp,sp,12
   11694:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11698:	e0bfff17 	ldw	r2,-4(fp)
   1169c:	10000816 	blt	r2,zero,116c0 <close+0x3c>
   116a0:	01400304 	movi	r5,12
   116a4:	e13fff17 	ldw	r4,-4(fp)
   116a8:	0012c240 	call	12c24 <__mulsi3>
   116ac:	1007883a 	mov	r3,r2
   116b0:	00800074 	movhi	r2,1
   116b4:	108f5004 	addi	r2,r2,15680
   116b8:	1885883a 	add	r2,r3,r2
   116bc:	00000106 	br	116c4 <close+0x40>
   116c0:	0005883a 	mov	r2,zero
   116c4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   116c8:	e0bffd17 	ldw	r2,-12(fp)
   116cc:	10001926 	beq	r2,zero,11734 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   116d0:	e0bffd17 	ldw	r2,-12(fp)
   116d4:	10800017 	ldw	r2,0(r2)
   116d8:	10800417 	ldw	r2,16(r2)
   116dc:	10000626 	beq	r2,zero,116f8 <close+0x74>
   116e0:	e0bffd17 	ldw	r2,-12(fp)
   116e4:	10800017 	ldw	r2,0(r2)
   116e8:	10800417 	ldw	r2,16(r2)
   116ec:	e13ffd17 	ldw	r4,-12(fp)
   116f0:	103ee83a 	callr	r2
   116f4:	00000106 	br	116fc <close+0x78>
   116f8:	0005883a 	mov	r2,zero
   116fc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11700:	e13fff17 	ldw	r4,-4(fp)
   11704:	0011fec0 	call	11fec <alt_release_fd>
    if (rval < 0)
   11708:	e0bffe17 	ldw	r2,-8(fp)
   1170c:	1000070e 	bge	r2,zero,1172c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   11710:	00116480 	call	11648 <alt_get_errno>
   11714:	1007883a 	mov	r3,r2
   11718:	e0bffe17 	ldw	r2,-8(fp)
   1171c:	0085c83a 	sub	r2,zero,r2
   11720:	18800015 	stw	r2,0(r3)
      return -1;
   11724:	00bfffc4 	movi	r2,-1
   11728:	00000706 	br	11748 <close+0xc4>
    }
    return 0;
   1172c:	0005883a 	mov	r2,zero
   11730:	00000506 	br	11748 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11734:	00116480 	call	11648 <alt_get_errno>
   11738:	1007883a 	mov	r3,r2
   1173c:	00801444 	movi	r2,81
   11740:	18800015 	stw	r2,0(r3)
    return -1;
   11744:	00bfffc4 	movi	r2,-1
  }
}
   11748:	e037883a 	mov	sp,fp
   1174c:	dfc00117 	ldw	ra,4(sp)
   11750:	df000017 	ldw	fp,0(sp)
   11754:	dec00204 	addi	sp,sp,8
   11758:	f800283a 	ret

0001175c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1175c:	deffff04 	addi	sp,sp,-4
   11760:	df000015 	stw	fp,0(sp)
   11764:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11768:	0001883a 	nop
   1176c:	e037883a 	mov	sp,fp
   11770:	df000017 	ldw	fp,0(sp)
   11774:	dec00104 	addi	sp,sp,4
   11778:	f800283a 	ret

0001177c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1177c:	defffc04 	addi	sp,sp,-16
   11780:	df000315 	stw	fp,12(sp)
   11784:	df000304 	addi	fp,sp,12
   11788:	e13ffd15 	stw	r4,-12(fp)
   1178c:	e17ffe15 	stw	r5,-8(fp)
   11790:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11794:	e0bfff17 	ldw	r2,-4(fp)
}
   11798:	e037883a 	mov	sp,fp
   1179c:	df000017 	ldw	fp,0(sp)
   117a0:	dec00104 	addi	sp,sp,4
   117a4:	f800283a 	ret

000117a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   117a8:	defffe04 	addi	sp,sp,-8
   117ac:	dfc00115 	stw	ra,4(sp)
   117b0:	df000015 	stw	fp,0(sp)
   117b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   117b8:	d0a00817 	ldw	r2,-32736(gp)
   117bc:	10000326 	beq	r2,zero,117cc <alt_get_errno+0x24>
   117c0:	d0a00817 	ldw	r2,-32736(gp)
   117c4:	103ee83a 	callr	r2
   117c8:	00000106 	br	117d0 <alt_get_errno+0x28>
   117cc:	d0a5b304 	addi	r2,gp,-26932
}
   117d0:	e037883a 	mov	sp,fp
   117d4:	dfc00117 	ldw	ra,4(sp)
   117d8:	df000017 	ldw	fp,0(sp)
   117dc:	dec00204 	addi	sp,sp,8
   117e0:	f800283a 	ret

000117e4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   117e4:	defffa04 	addi	sp,sp,-24
   117e8:	dfc00515 	stw	ra,20(sp)
   117ec:	df000415 	stw	fp,16(sp)
   117f0:	df000404 	addi	fp,sp,16
   117f4:	e13ffe15 	stw	r4,-8(fp)
   117f8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   117fc:	e0bffe17 	ldw	r2,-8(fp)
   11800:	10000326 	beq	r2,zero,11810 <alt_dev_llist_insert+0x2c>
   11804:	e0bffe17 	ldw	r2,-8(fp)
   11808:	10800217 	ldw	r2,8(r2)
   1180c:	1000061e 	bne	r2,zero,11828 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11810:	00117a80 	call	117a8 <alt_get_errno>
   11814:	1007883a 	mov	r3,r2
   11818:	00800584 	movi	r2,22
   1181c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11820:	00bffa84 	movi	r2,-22
   11824:	00001306 	br	11874 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11828:	e0bffe17 	ldw	r2,-8(fp)
   1182c:	e0ffff17 	ldw	r3,-4(fp)
   11830:	e0fffc15 	stw	r3,-16(fp)
   11834:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11838:	e0bffd17 	ldw	r2,-12(fp)
   1183c:	e0fffc17 	ldw	r3,-16(fp)
   11840:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11844:	e0bffc17 	ldw	r2,-16(fp)
   11848:	10c00017 	ldw	r3,0(r2)
   1184c:	e0bffd17 	ldw	r2,-12(fp)
   11850:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11854:	e0bffc17 	ldw	r2,-16(fp)
   11858:	10800017 	ldw	r2,0(r2)
   1185c:	e0fffd17 	ldw	r3,-12(fp)
   11860:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11864:	e0bffc17 	ldw	r2,-16(fp)
   11868:	e0fffd17 	ldw	r3,-12(fp)
   1186c:	10c00015 	stw	r3,0(r2)

  return 0;  
   11870:	0005883a 	mov	r2,zero
}
   11874:	e037883a 	mov	sp,fp
   11878:	dfc00117 	ldw	ra,4(sp)
   1187c:	df000017 	ldw	fp,0(sp)
   11880:	dec00204 	addi	sp,sp,8
   11884:	f800283a 	ret

00011888 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11888:	defffd04 	addi	sp,sp,-12
   1188c:	dfc00215 	stw	ra,8(sp)
   11890:	df000115 	stw	fp,4(sp)
   11894:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11898:	00800074 	movhi	r2,1
   1189c:	108b1f04 	addi	r2,r2,11388
   118a0:	e0bfff15 	stw	r2,-4(fp)
   118a4:	00000606 	br	118c0 <_do_ctors+0x38>
        (*ctor) (); 
   118a8:	e0bfff17 	ldw	r2,-4(fp)
   118ac:	10800017 	ldw	r2,0(r2)
   118b0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   118b4:	e0bfff17 	ldw	r2,-4(fp)
   118b8:	10bfff04 	addi	r2,r2,-4
   118bc:	e0bfff15 	stw	r2,-4(fp)
   118c0:	e0ffff17 	ldw	r3,-4(fp)
   118c4:	00800074 	movhi	r2,1
   118c8:	108b2004 	addi	r2,r2,11392
   118cc:	18bff62e 	bgeu	r3,r2,118a8 <_gp+0xffff55c4>
        (*ctor) (); 
}
   118d0:	0001883a 	nop
   118d4:	e037883a 	mov	sp,fp
   118d8:	dfc00117 	ldw	ra,4(sp)
   118dc:	df000017 	ldw	fp,0(sp)
   118e0:	dec00204 	addi	sp,sp,8
   118e4:	f800283a 	ret

000118e8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   118e8:	defffd04 	addi	sp,sp,-12
   118ec:	dfc00215 	stw	ra,8(sp)
   118f0:	df000115 	stw	fp,4(sp)
   118f4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   118f8:	00800074 	movhi	r2,1
   118fc:	108b1f04 	addi	r2,r2,11388
   11900:	e0bfff15 	stw	r2,-4(fp)
   11904:	00000606 	br	11920 <_do_dtors+0x38>
        (*dtor) (); 
   11908:	e0bfff17 	ldw	r2,-4(fp)
   1190c:	10800017 	ldw	r2,0(r2)
   11910:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11914:	e0bfff17 	ldw	r2,-4(fp)
   11918:	10bfff04 	addi	r2,r2,-4
   1191c:	e0bfff15 	stw	r2,-4(fp)
   11920:	e0ffff17 	ldw	r3,-4(fp)
   11924:	00800074 	movhi	r2,1
   11928:	108b2004 	addi	r2,r2,11392
   1192c:	18bff62e 	bgeu	r3,r2,11908 <_gp+0xffff5624>
        (*dtor) (); 
}
   11930:	0001883a 	nop
   11934:	e037883a 	mov	sp,fp
   11938:	dfc00117 	ldw	ra,4(sp)
   1193c:	df000017 	ldw	fp,0(sp)
   11940:	dec00204 	addi	sp,sp,8
   11944:	f800283a 	ret

00011948 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11948:	deffff04 	addi	sp,sp,-4
   1194c:	df000015 	stw	fp,0(sp)
   11950:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   11954:	0001883a 	nop
   11958:	e037883a 	mov	sp,fp
   1195c:	df000017 	ldw	fp,0(sp)
   11960:	dec00104 	addi	sp,sp,4
   11964:	f800283a 	ret

00011968 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11968:	defff904 	addi	sp,sp,-28
   1196c:	dfc00615 	stw	ra,24(sp)
   11970:	df000515 	stw	fp,20(sp)
   11974:	df000504 	addi	fp,sp,20
   11978:	e13ffc15 	stw	r4,-16(fp)
   1197c:	e17ffd15 	stw	r5,-12(fp)
   11980:	e1bffe15 	stw	r6,-8(fp)
   11984:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   11988:	e0800217 	ldw	r2,8(fp)
   1198c:	d8800015 	stw	r2,0(sp)
   11990:	e1ffff17 	ldw	r7,-4(fp)
   11994:	e1bffe17 	ldw	r6,-8(fp)
   11998:	e17ffd17 	ldw	r5,-12(fp)
   1199c:	e13ffc17 	ldw	r4,-16(fp)
   119a0:	0011b180 	call	11b18 <alt_iic_isr_register>
}  
   119a4:	e037883a 	mov	sp,fp
   119a8:	dfc00117 	ldw	ra,4(sp)
   119ac:	df000017 	ldw	fp,0(sp)
   119b0:	dec00204 	addi	sp,sp,8
   119b4:	f800283a 	ret

000119b8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   119b8:	defff904 	addi	sp,sp,-28
   119bc:	df000615 	stw	fp,24(sp)
   119c0:	df000604 	addi	fp,sp,24
   119c4:	e13ffe15 	stw	r4,-8(fp)
   119c8:	e17fff15 	stw	r5,-4(fp)
   119cc:	e0bfff17 	ldw	r2,-4(fp)
   119d0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   119d4:	0005303a 	rdctl	r2,status
   119d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   119dc:	e0fffb17 	ldw	r3,-20(fp)
   119e0:	00bfff84 	movi	r2,-2
   119e4:	1884703a 	and	r2,r3,r2
   119e8:	1001703a 	wrctl	status,r2
  
  return context;
   119ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   119f0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   119f4:	00c00044 	movi	r3,1
   119f8:	e0bffa17 	ldw	r2,-24(fp)
   119fc:	1884983a 	sll	r2,r3,r2
   11a00:	1007883a 	mov	r3,r2
   11a04:	d0a5af17 	ldw	r2,-26948(gp)
   11a08:	1884b03a 	or	r2,r3,r2
   11a0c:	d0a5af15 	stw	r2,-26948(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11a10:	d0a5af17 	ldw	r2,-26948(gp)
   11a14:	100170fa 	wrctl	ienable,r2
   11a18:	e0bffc17 	ldw	r2,-16(fp)
   11a1c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a20:	e0bffd17 	ldw	r2,-12(fp)
   11a24:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11a28:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   11a2c:	0001883a 	nop
}
   11a30:	e037883a 	mov	sp,fp
   11a34:	df000017 	ldw	fp,0(sp)
   11a38:	dec00104 	addi	sp,sp,4
   11a3c:	f800283a 	ret

00011a40 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   11a40:	defff904 	addi	sp,sp,-28
   11a44:	df000615 	stw	fp,24(sp)
   11a48:	df000604 	addi	fp,sp,24
   11a4c:	e13ffe15 	stw	r4,-8(fp)
   11a50:	e17fff15 	stw	r5,-4(fp)
   11a54:	e0bfff17 	ldw	r2,-4(fp)
   11a58:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a5c:	0005303a 	rdctl	r2,status
   11a60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a64:	e0fffb17 	ldw	r3,-20(fp)
   11a68:	00bfff84 	movi	r2,-2
   11a6c:	1884703a 	and	r2,r3,r2
   11a70:	1001703a 	wrctl	status,r2
  
  return context;
   11a74:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11a78:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11a7c:	00c00044 	movi	r3,1
   11a80:	e0bffa17 	ldw	r2,-24(fp)
   11a84:	1884983a 	sll	r2,r3,r2
   11a88:	0084303a 	nor	r2,zero,r2
   11a8c:	1007883a 	mov	r3,r2
   11a90:	d0a5af17 	ldw	r2,-26948(gp)
   11a94:	1884703a 	and	r2,r3,r2
   11a98:	d0a5af15 	stw	r2,-26948(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11a9c:	d0a5af17 	ldw	r2,-26948(gp)
   11aa0:	100170fa 	wrctl	ienable,r2
   11aa4:	e0bffc17 	ldw	r2,-16(fp)
   11aa8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11aac:	e0bffd17 	ldw	r2,-12(fp)
   11ab0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11ab4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   11ab8:	0001883a 	nop
}
   11abc:	e037883a 	mov	sp,fp
   11ac0:	df000017 	ldw	fp,0(sp)
   11ac4:	dec00104 	addi	sp,sp,4
   11ac8:	f800283a 	ret

00011acc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11acc:	defffc04 	addi	sp,sp,-16
   11ad0:	df000315 	stw	fp,12(sp)
   11ad4:	df000304 	addi	fp,sp,12
   11ad8:	e13ffe15 	stw	r4,-8(fp)
   11adc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11ae0:	000530fa 	rdctl	r2,ienable
   11ae4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   11ae8:	00c00044 	movi	r3,1
   11aec:	e0bfff17 	ldw	r2,-4(fp)
   11af0:	1884983a 	sll	r2,r3,r2
   11af4:	1007883a 	mov	r3,r2
   11af8:	e0bffd17 	ldw	r2,-12(fp)
   11afc:	1884703a 	and	r2,r3,r2
   11b00:	1004c03a 	cmpne	r2,r2,zero
   11b04:	10803fcc 	andi	r2,r2,255
}
   11b08:	e037883a 	mov	sp,fp
   11b0c:	df000017 	ldw	fp,0(sp)
   11b10:	dec00104 	addi	sp,sp,4
   11b14:	f800283a 	ret

00011b18 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11b18:	defff504 	addi	sp,sp,-44
   11b1c:	dfc00a15 	stw	ra,40(sp)
   11b20:	df000915 	stw	fp,36(sp)
   11b24:	df000904 	addi	fp,sp,36
   11b28:	e13ffc15 	stw	r4,-16(fp)
   11b2c:	e17ffd15 	stw	r5,-12(fp)
   11b30:	e1bffe15 	stw	r6,-8(fp)
   11b34:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   11b38:	00bffa84 	movi	r2,-22
   11b3c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   11b40:	e0bffd17 	ldw	r2,-12(fp)
   11b44:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11b48:	e0bff817 	ldw	r2,-32(fp)
   11b4c:	10800808 	cmpgei	r2,r2,32
   11b50:	1000271e 	bne	r2,zero,11bf0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11b54:	0005303a 	rdctl	r2,status
   11b58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11b5c:	e0fffb17 	ldw	r3,-20(fp)
   11b60:	00bfff84 	movi	r2,-2
   11b64:	1884703a 	and	r2,r3,r2
   11b68:	1001703a 	wrctl	status,r2
  
  return context;
   11b6c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   11b70:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   11b74:	00800074 	movhi	r2,1
   11b78:	10966d04 	addi	r2,r2,22964
   11b7c:	e0fff817 	ldw	r3,-32(fp)
   11b80:	180690fa 	slli	r3,r3,3
   11b84:	10c5883a 	add	r2,r2,r3
   11b88:	e0fffe17 	ldw	r3,-8(fp)
   11b8c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   11b90:	00800074 	movhi	r2,1
   11b94:	10966d04 	addi	r2,r2,22964
   11b98:	e0fff817 	ldw	r3,-32(fp)
   11b9c:	180690fa 	slli	r3,r3,3
   11ba0:	10c5883a 	add	r2,r2,r3
   11ba4:	10800104 	addi	r2,r2,4
   11ba8:	e0ffff17 	ldw	r3,-4(fp)
   11bac:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   11bb0:	e0bffe17 	ldw	r2,-8(fp)
   11bb4:	10000526 	beq	r2,zero,11bcc <alt_iic_isr_register+0xb4>
   11bb8:	e0bff817 	ldw	r2,-32(fp)
   11bbc:	100b883a 	mov	r5,r2
   11bc0:	e13ffc17 	ldw	r4,-16(fp)
   11bc4:	00119b80 	call	119b8 <alt_ic_irq_enable>
   11bc8:	00000406 	br	11bdc <alt_iic_isr_register+0xc4>
   11bcc:	e0bff817 	ldw	r2,-32(fp)
   11bd0:	100b883a 	mov	r5,r2
   11bd4:	e13ffc17 	ldw	r4,-16(fp)
   11bd8:	0011a400 	call	11a40 <alt_ic_irq_disable>
   11bdc:	e0bff715 	stw	r2,-36(fp)
   11be0:	e0bffa17 	ldw	r2,-24(fp)
   11be4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11be8:	e0bff917 	ldw	r2,-28(fp)
   11bec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   11bf0:	e0bff717 	ldw	r2,-36(fp)
}
   11bf4:	e037883a 	mov	sp,fp
   11bf8:	dfc00117 	ldw	ra,4(sp)
   11bfc:	df000017 	ldw	fp,0(sp)
   11c00:	dec00204 	addi	sp,sp,8
   11c04:	f800283a 	ret

00011c08 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11c08:	defff804 	addi	sp,sp,-32
   11c0c:	dfc00715 	stw	ra,28(sp)
   11c10:	df000615 	stw	fp,24(sp)
   11c14:	dc000515 	stw	r16,20(sp)
   11c18:	df000604 	addi	fp,sp,24
   11c1c:	e13ffb15 	stw	r4,-20(fp)
   11c20:	e17ffc15 	stw	r5,-16(fp)
   11c24:	e1bffd15 	stw	r6,-12(fp)
   11c28:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   11c2c:	e1bffe17 	ldw	r6,-8(fp)
   11c30:	e17ffd17 	ldw	r5,-12(fp)
   11c34:	e13ffc17 	ldw	r4,-16(fp)
   11c38:	0011e900 	call	11e90 <open>
   11c3c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   11c40:	e0bffa17 	ldw	r2,-24(fp)
   11c44:	10002216 	blt	r2,zero,11cd0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   11c48:	04000074 	movhi	r16,1
   11c4c:	840f5004 	addi	r16,r16,15680
   11c50:	e0bffa17 	ldw	r2,-24(fp)
   11c54:	01400304 	movi	r5,12
   11c58:	1009883a 	mov	r4,r2
   11c5c:	0012c240 	call	12c24 <__mulsi3>
   11c60:	8085883a 	add	r2,r16,r2
   11c64:	10c00017 	ldw	r3,0(r2)
   11c68:	e0bffb17 	ldw	r2,-20(fp)
   11c6c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11c70:	04000074 	movhi	r16,1
   11c74:	840f5004 	addi	r16,r16,15680
   11c78:	e0bffa17 	ldw	r2,-24(fp)
   11c7c:	01400304 	movi	r5,12
   11c80:	1009883a 	mov	r4,r2
   11c84:	0012c240 	call	12c24 <__mulsi3>
   11c88:	8085883a 	add	r2,r16,r2
   11c8c:	10800104 	addi	r2,r2,4
   11c90:	10c00017 	ldw	r3,0(r2)
   11c94:	e0bffb17 	ldw	r2,-20(fp)
   11c98:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11c9c:	04000074 	movhi	r16,1
   11ca0:	840f5004 	addi	r16,r16,15680
   11ca4:	e0bffa17 	ldw	r2,-24(fp)
   11ca8:	01400304 	movi	r5,12
   11cac:	1009883a 	mov	r4,r2
   11cb0:	0012c240 	call	12c24 <__mulsi3>
   11cb4:	8085883a 	add	r2,r16,r2
   11cb8:	10800204 	addi	r2,r2,8
   11cbc:	10c00017 	ldw	r3,0(r2)
   11cc0:	e0bffb17 	ldw	r2,-20(fp)
   11cc4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11cc8:	e13ffa17 	ldw	r4,-24(fp)
   11ccc:	0011fec0 	call	11fec <alt_release_fd>
  }
} 
   11cd0:	0001883a 	nop
   11cd4:	e6ffff04 	addi	sp,fp,-4
   11cd8:	dfc00217 	ldw	ra,8(sp)
   11cdc:	df000117 	ldw	fp,4(sp)
   11ce0:	dc000017 	ldw	r16,0(sp)
   11ce4:	dec00304 	addi	sp,sp,12
   11ce8:	f800283a 	ret

00011cec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11cec:	defffb04 	addi	sp,sp,-20
   11cf0:	dfc00415 	stw	ra,16(sp)
   11cf4:	df000315 	stw	fp,12(sp)
   11cf8:	df000304 	addi	fp,sp,12
   11cfc:	e13ffd15 	stw	r4,-12(fp)
   11d00:	e17ffe15 	stw	r5,-8(fp)
   11d04:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11d08:	01c07fc4 	movi	r7,511
   11d0c:	01800044 	movi	r6,1
   11d10:	e17ffd17 	ldw	r5,-12(fp)
   11d14:	01000074 	movhi	r4,1
   11d18:	210f5304 	addi	r4,r4,15692
   11d1c:	0011c080 	call	11c08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11d20:	01c07fc4 	movi	r7,511
   11d24:	000d883a 	mov	r6,zero
   11d28:	e17ffe17 	ldw	r5,-8(fp)
   11d2c:	01000074 	movhi	r4,1
   11d30:	210f5004 	addi	r4,r4,15680
   11d34:	0011c080 	call	11c08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11d38:	01c07fc4 	movi	r7,511
   11d3c:	01800044 	movi	r6,1
   11d40:	e17fff17 	ldw	r5,-4(fp)
   11d44:	01000074 	movhi	r4,1
   11d48:	210f5604 	addi	r4,r4,15704
   11d4c:	0011c080 	call	11c08 <alt_open_fd>
}  
   11d50:	0001883a 	nop
   11d54:	e037883a 	mov	sp,fp
   11d58:	dfc00117 	ldw	ra,4(sp)
   11d5c:	df000017 	ldw	fp,0(sp)
   11d60:	dec00204 	addi	sp,sp,8
   11d64:	f800283a 	ret

00011d68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11d68:	defffe04 	addi	sp,sp,-8
   11d6c:	dfc00115 	stw	ra,4(sp)
   11d70:	df000015 	stw	fp,0(sp)
   11d74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11d78:	d0a00817 	ldw	r2,-32736(gp)
   11d7c:	10000326 	beq	r2,zero,11d8c <alt_get_errno+0x24>
   11d80:	d0a00817 	ldw	r2,-32736(gp)
   11d84:	103ee83a 	callr	r2
   11d88:	00000106 	br	11d90 <alt_get_errno+0x28>
   11d8c:	d0a5b304 	addi	r2,gp,-26932
}
   11d90:	e037883a 	mov	sp,fp
   11d94:	dfc00117 	ldw	ra,4(sp)
   11d98:	df000017 	ldw	fp,0(sp)
   11d9c:	dec00204 	addi	sp,sp,8
   11da0:	f800283a 	ret

00011da4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11da4:	defffb04 	addi	sp,sp,-20
   11da8:	dfc00415 	stw	ra,16(sp)
   11dac:	df000315 	stw	fp,12(sp)
   11db0:	dc000215 	stw	r16,8(sp)
   11db4:	df000304 	addi	fp,sp,12
   11db8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11dbc:	e0bffe17 	ldw	r2,-8(fp)
   11dc0:	10800217 	ldw	r2,8(r2)
   11dc4:	10d00034 	orhi	r3,r2,16384
   11dc8:	e0bffe17 	ldw	r2,-8(fp)
   11dcc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11dd0:	e03ffd15 	stw	zero,-12(fp)
   11dd4:	00002306 	br	11e64 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11dd8:	04000074 	movhi	r16,1
   11ddc:	840f5004 	addi	r16,r16,15680
   11de0:	e0bffd17 	ldw	r2,-12(fp)
   11de4:	01400304 	movi	r5,12
   11de8:	1009883a 	mov	r4,r2
   11dec:	0012c240 	call	12c24 <__mulsi3>
   11df0:	8085883a 	add	r2,r16,r2
   11df4:	10c00017 	ldw	r3,0(r2)
   11df8:	e0bffe17 	ldw	r2,-8(fp)
   11dfc:	10800017 	ldw	r2,0(r2)
   11e00:	1880151e 	bne	r3,r2,11e58 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11e04:	04000074 	movhi	r16,1
   11e08:	840f5004 	addi	r16,r16,15680
   11e0c:	e0bffd17 	ldw	r2,-12(fp)
   11e10:	01400304 	movi	r5,12
   11e14:	1009883a 	mov	r4,r2
   11e18:	0012c240 	call	12c24 <__mulsi3>
   11e1c:	8085883a 	add	r2,r16,r2
   11e20:	10800204 	addi	r2,r2,8
   11e24:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11e28:	10000b0e 	bge	r2,zero,11e58 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11e2c:	01400304 	movi	r5,12
   11e30:	e13ffd17 	ldw	r4,-12(fp)
   11e34:	0012c240 	call	12c24 <__mulsi3>
   11e38:	1007883a 	mov	r3,r2
   11e3c:	00800074 	movhi	r2,1
   11e40:	108f5004 	addi	r2,r2,15680
   11e44:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11e48:	e0bffe17 	ldw	r2,-8(fp)
   11e4c:	18800226 	beq	r3,r2,11e58 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11e50:	00bffcc4 	movi	r2,-13
   11e54:	00000806 	br	11e78 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11e58:	e0bffd17 	ldw	r2,-12(fp)
   11e5c:	10800044 	addi	r2,r2,1
   11e60:	e0bffd15 	stw	r2,-12(fp)
   11e64:	d0a00717 	ldw	r2,-32740(gp)
   11e68:	1007883a 	mov	r3,r2
   11e6c:	e0bffd17 	ldw	r2,-12(fp)
   11e70:	18bfd92e 	bgeu	r3,r2,11dd8 <_gp+0xffff5af4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11e74:	0005883a 	mov	r2,zero
}
   11e78:	e6ffff04 	addi	sp,fp,-4
   11e7c:	dfc00217 	ldw	ra,8(sp)
   11e80:	df000117 	ldw	fp,4(sp)
   11e84:	dc000017 	ldw	r16,0(sp)
   11e88:	dec00304 	addi	sp,sp,12
   11e8c:	f800283a 	ret

00011e90 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11e90:	defff604 	addi	sp,sp,-40
   11e94:	dfc00915 	stw	ra,36(sp)
   11e98:	df000815 	stw	fp,32(sp)
   11e9c:	df000804 	addi	fp,sp,32
   11ea0:	e13ffd15 	stw	r4,-12(fp)
   11ea4:	e17ffe15 	stw	r5,-8(fp)
   11ea8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11eac:	00bfffc4 	movi	r2,-1
   11eb0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11eb4:	00bffb44 	movi	r2,-19
   11eb8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11ebc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11ec0:	d1600504 	addi	r5,gp,-32748
   11ec4:	e13ffd17 	ldw	r4,-12(fp)
   11ec8:	00122380 	call	12238 <alt_find_dev>
   11ecc:	e0bff815 	stw	r2,-32(fp)
   11ed0:	e0bff817 	ldw	r2,-32(fp)
   11ed4:	1000051e 	bne	r2,zero,11eec <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11ed8:	e13ffd17 	ldw	r4,-12(fp)
   11edc:	00122c80 	call	122c8 <alt_find_file>
   11ee0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11ee4:	00800044 	movi	r2,1
   11ee8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11eec:	e0bff817 	ldw	r2,-32(fp)
   11ef0:	10002b26 	beq	r2,zero,11fa0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11ef4:	e13ff817 	ldw	r4,-32(fp)
   11ef8:	00123d00 	call	123d0 <alt_get_fd>
   11efc:	e0bff915 	stw	r2,-28(fp)
   11f00:	e0bff917 	ldw	r2,-28(fp)
   11f04:	1000030e 	bge	r2,zero,11f14 <open+0x84>
    {
      status = index;
   11f08:	e0bff917 	ldw	r2,-28(fp)
   11f0c:	e0bffa15 	stw	r2,-24(fp)
   11f10:	00002506 	br	11fa8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   11f14:	01400304 	movi	r5,12
   11f18:	e13ff917 	ldw	r4,-28(fp)
   11f1c:	0012c240 	call	12c24 <__mulsi3>
   11f20:	1007883a 	mov	r3,r2
   11f24:	00800074 	movhi	r2,1
   11f28:	108f5004 	addi	r2,r2,15680
   11f2c:	1885883a 	add	r2,r3,r2
   11f30:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11f34:	e0fffe17 	ldw	r3,-8(fp)
   11f38:	00900034 	movhi	r2,16384
   11f3c:	10bfffc4 	addi	r2,r2,-1
   11f40:	1886703a 	and	r3,r3,r2
   11f44:	e0bffc17 	ldw	r2,-16(fp)
   11f48:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11f4c:	e0bffb17 	ldw	r2,-20(fp)
   11f50:	1000051e 	bne	r2,zero,11f68 <open+0xd8>
   11f54:	e13ffc17 	ldw	r4,-16(fp)
   11f58:	0011da40 	call	11da4 <alt_file_locked>
   11f5c:	e0bffa15 	stw	r2,-24(fp)
   11f60:	e0bffa17 	ldw	r2,-24(fp)
   11f64:	10001016 	blt	r2,zero,11fa8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11f68:	e0bff817 	ldw	r2,-32(fp)
   11f6c:	10800317 	ldw	r2,12(r2)
   11f70:	10000826 	beq	r2,zero,11f94 <open+0x104>
   11f74:	e0bff817 	ldw	r2,-32(fp)
   11f78:	10800317 	ldw	r2,12(r2)
   11f7c:	e1ffff17 	ldw	r7,-4(fp)
   11f80:	e1bffe17 	ldw	r6,-8(fp)
   11f84:	e17ffd17 	ldw	r5,-12(fp)
   11f88:	e13ffc17 	ldw	r4,-16(fp)
   11f8c:	103ee83a 	callr	r2
   11f90:	00000106 	br	11f98 <open+0x108>
   11f94:	0005883a 	mov	r2,zero
   11f98:	e0bffa15 	stw	r2,-24(fp)
   11f9c:	00000206 	br	11fa8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11fa0:	00bffb44 	movi	r2,-19
   11fa4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11fa8:	e0bffa17 	ldw	r2,-24(fp)
   11fac:	1000090e 	bge	r2,zero,11fd4 <open+0x144>
  {
    alt_release_fd (index);  
   11fb0:	e13ff917 	ldw	r4,-28(fp)
   11fb4:	0011fec0 	call	11fec <alt_release_fd>
    ALT_ERRNO = -status;
   11fb8:	0011d680 	call	11d68 <alt_get_errno>
   11fbc:	1007883a 	mov	r3,r2
   11fc0:	e0bffa17 	ldw	r2,-24(fp)
   11fc4:	0085c83a 	sub	r2,zero,r2
   11fc8:	18800015 	stw	r2,0(r3)
    return -1;
   11fcc:	00bfffc4 	movi	r2,-1
   11fd0:	00000106 	br	11fd8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   11fd4:	e0bff917 	ldw	r2,-28(fp)
}
   11fd8:	e037883a 	mov	sp,fp
   11fdc:	dfc00117 	ldw	ra,4(sp)
   11fe0:	df000017 	ldw	fp,0(sp)
   11fe4:	dec00204 	addi	sp,sp,8
   11fe8:	f800283a 	ret

00011fec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   11fec:	defffc04 	addi	sp,sp,-16
   11ff0:	dfc00315 	stw	ra,12(sp)
   11ff4:	df000215 	stw	fp,8(sp)
   11ff8:	dc000115 	stw	r16,4(sp)
   11ffc:	df000204 	addi	fp,sp,8
   12000:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   12004:	e0bffe17 	ldw	r2,-8(fp)
   12008:	108000d0 	cmplti	r2,r2,3
   1200c:	1000111e 	bne	r2,zero,12054 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   12010:	04000074 	movhi	r16,1
   12014:	840f5004 	addi	r16,r16,15680
   12018:	e0bffe17 	ldw	r2,-8(fp)
   1201c:	01400304 	movi	r5,12
   12020:	1009883a 	mov	r4,r2
   12024:	0012c240 	call	12c24 <__mulsi3>
   12028:	8085883a 	add	r2,r16,r2
   1202c:	10800204 	addi	r2,r2,8
   12030:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   12034:	04000074 	movhi	r16,1
   12038:	840f5004 	addi	r16,r16,15680
   1203c:	e0bffe17 	ldw	r2,-8(fp)
   12040:	01400304 	movi	r5,12
   12044:	1009883a 	mov	r4,r2
   12048:	0012c240 	call	12c24 <__mulsi3>
   1204c:	8085883a 	add	r2,r16,r2
   12050:	10000015 	stw	zero,0(r2)
  }
}
   12054:	0001883a 	nop
   12058:	e6ffff04 	addi	sp,fp,-4
   1205c:	dfc00217 	ldw	ra,8(sp)
   12060:	df000117 	ldw	fp,4(sp)
   12064:	dc000017 	ldw	r16,0(sp)
   12068:	dec00304 	addi	sp,sp,12
   1206c:	f800283a 	ret

00012070 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   12070:	defffa04 	addi	sp,sp,-24
   12074:	df000515 	stw	fp,20(sp)
   12078:	df000504 	addi	fp,sp,20
   1207c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12080:	0005303a 	rdctl	r2,status
   12084:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12088:	e0fffc17 	ldw	r3,-16(fp)
   1208c:	00bfff84 	movi	r2,-2
   12090:	1884703a 	and	r2,r3,r2
   12094:	1001703a 	wrctl	status,r2
  
  return context;
   12098:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1209c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   120a0:	e0bfff17 	ldw	r2,-4(fp)
   120a4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   120a8:	e0bffd17 	ldw	r2,-12(fp)
   120ac:	10800017 	ldw	r2,0(r2)
   120b0:	e0fffd17 	ldw	r3,-12(fp)
   120b4:	18c00117 	ldw	r3,4(r3)
   120b8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   120bc:	e0bffd17 	ldw	r2,-12(fp)
   120c0:	10800117 	ldw	r2,4(r2)
   120c4:	e0fffd17 	ldw	r3,-12(fp)
   120c8:	18c00017 	ldw	r3,0(r3)
   120cc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   120d0:	e0bffd17 	ldw	r2,-12(fp)
   120d4:	e0fffd17 	ldw	r3,-12(fp)
   120d8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   120dc:	e0bffd17 	ldw	r2,-12(fp)
   120e0:	e0fffd17 	ldw	r3,-12(fp)
   120e4:	10c00015 	stw	r3,0(r2)
   120e8:	e0bffb17 	ldw	r2,-20(fp)
   120ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   120f0:	e0bffe17 	ldw	r2,-8(fp)
   120f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   120f8:	0001883a 	nop
   120fc:	e037883a 	mov	sp,fp
   12100:	df000017 	ldw	fp,0(sp)
   12104:	dec00104 	addi	sp,sp,4
   12108:	f800283a 	ret

0001210c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1210c:	defffb04 	addi	sp,sp,-20
   12110:	dfc00415 	stw	ra,16(sp)
   12114:	df000315 	stw	fp,12(sp)
   12118:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1211c:	d0a00a17 	ldw	r2,-32728(gp)
   12120:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12124:	d0a5b117 	ldw	r2,-26940(gp)
   12128:	10800044 	addi	r2,r2,1
   1212c:	d0a5b115 	stw	r2,-26940(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12130:	00002e06 	br	121ec <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   12134:	e0bffd17 	ldw	r2,-12(fp)
   12138:	10800017 	ldw	r2,0(r2)
   1213c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   12140:	e0bffd17 	ldw	r2,-12(fp)
   12144:	10800403 	ldbu	r2,16(r2)
   12148:	10803fcc 	andi	r2,r2,255
   1214c:	10000426 	beq	r2,zero,12160 <alt_tick+0x54>
   12150:	d0a5b117 	ldw	r2,-26940(gp)
   12154:	1000021e 	bne	r2,zero,12160 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   12158:	e0bffd17 	ldw	r2,-12(fp)
   1215c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   12160:	e0bffd17 	ldw	r2,-12(fp)
   12164:	10800217 	ldw	r2,8(r2)
   12168:	d0e5b117 	ldw	r3,-26940(gp)
   1216c:	18801d36 	bltu	r3,r2,121e4 <alt_tick+0xd8>
   12170:	e0bffd17 	ldw	r2,-12(fp)
   12174:	10800403 	ldbu	r2,16(r2)
   12178:	10803fcc 	andi	r2,r2,255
   1217c:	1000191e 	bne	r2,zero,121e4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   12180:	e0bffd17 	ldw	r2,-12(fp)
   12184:	10800317 	ldw	r2,12(r2)
   12188:	e0fffd17 	ldw	r3,-12(fp)
   1218c:	18c00517 	ldw	r3,20(r3)
   12190:	1809883a 	mov	r4,r3
   12194:	103ee83a 	callr	r2
   12198:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1219c:	e0bfff17 	ldw	r2,-4(fp)
   121a0:	1000031e 	bne	r2,zero,121b0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   121a4:	e13ffd17 	ldw	r4,-12(fp)
   121a8:	00120700 	call	12070 <alt_alarm_stop>
   121ac:	00000d06 	br	121e4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   121b0:	e0bffd17 	ldw	r2,-12(fp)
   121b4:	10c00217 	ldw	r3,8(r2)
   121b8:	e0bfff17 	ldw	r2,-4(fp)
   121bc:	1887883a 	add	r3,r3,r2
   121c0:	e0bffd17 	ldw	r2,-12(fp)
   121c4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   121c8:	e0bffd17 	ldw	r2,-12(fp)
   121cc:	10c00217 	ldw	r3,8(r2)
   121d0:	d0a5b117 	ldw	r2,-26940(gp)
   121d4:	1880032e 	bgeu	r3,r2,121e4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   121d8:	e0bffd17 	ldw	r2,-12(fp)
   121dc:	00c00044 	movi	r3,1
   121e0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   121e4:	e0bffe17 	ldw	r2,-8(fp)
   121e8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   121ec:	e0fffd17 	ldw	r3,-12(fp)
   121f0:	d0a00a04 	addi	r2,gp,-32728
   121f4:	18bfcf1e 	bne	r3,r2,12134 <_gp+0xffff5e50>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   121f8:	0001883a 	nop
}
   121fc:	0001883a 	nop
   12200:	e037883a 	mov	sp,fp
   12204:	dfc00117 	ldw	ra,4(sp)
   12208:	df000017 	ldw	fp,0(sp)
   1220c:	dec00204 	addi	sp,sp,8
   12210:	f800283a 	ret

00012214 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   12214:	deffff04 	addi	sp,sp,-4
   12218:	df000015 	stw	fp,0(sp)
   1221c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   12220:	000170fa 	wrctl	ienable,zero
}
   12224:	0001883a 	nop
   12228:	e037883a 	mov	sp,fp
   1222c:	df000017 	ldw	fp,0(sp)
   12230:	dec00104 	addi	sp,sp,4
   12234:	f800283a 	ret

00012238 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12238:	defffa04 	addi	sp,sp,-24
   1223c:	dfc00515 	stw	ra,20(sp)
   12240:	df000415 	stw	fp,16(sp)
   12244:	df000404 	addi	fp,sp,16
   12248:	e13ffe15 	stw	r4,-8(fp)
   1224c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12250:	e0bfff17 	ldw	r2,-4(fp)
   12254:	10800017 	ldw	r2,0(r2)
   12258:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1225c:	e13ffe17 	ldw	r4,-8(fp)
   12260:	00127400 	call	12740 <strlen>
   12264:	10800044 	addi	r2,r2,1
   12268:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1226c:	00000d06 	br	122a4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12270:	e0bffc17 	ldw	r2,-16(fp)
   12274:	10800217 	ldw	r2,8(r2)
   12278:	e0fffd17 	ldw	r3,-12(fp)
   1227c:	180d883a 	mov	r6,r3
   12280:	e17ffe17 	ldw	r5,-8(fp)
   12284:	1009883a 	mov	r4,r2
   12288:	001257c0 	call	1257c <memcmp>
   1228c:	1000021e 	bne	r2,zero,12298 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   12290:	e0bffc17 	ldw	r2,-16(fp)
   12294:	00000706 	br	122b4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   12298:	e0bffc17 	ldw	r2,-16(fp)
   1229c:	10800017 	ldw	r2,0(r2)
   122a0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   122a4:	e0fffc17 	ldw	r3,-16(fp)
   122a8:	e0bfff17 	ldw	r2,-4(fp)
   122ac:	18bff01e 	bne	r3,r2,12270 <_gp+0xffff5f8c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   122b0:	0005883a 	mov	r2,zero
}
   122b4:	e037883a 	mov	sp,fp
   122b8:	dfc00117 	ldw	ra,4(sp)
   122bc:	df000017 	ldw	fp,0(sp)
   122c0:	dec00204 	addi	sp,sp,8
   122c4:	f800283a 	ret

000122c8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   122c8:	defffb04 	addi	sp,sp,-20
   122cc:	dfc00415 	stw	ra,16(sp)
   122d0:	df000315 	stw	fp,12(sp)
   122d4:	df000304 	addi	fp,sp,12
   122d8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   122dc:	d0a00317 	ldw	r2,-32756(gp)
   122e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   122e4:	00003106 	br	123ac <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   122e8:	e0bffd17 	ldw	r2,-12(fp)
   122ec:	10800217 	ldw	r2,8(r2)
   122f0:	1009883a 	mov	r4,r2
   122f4:	00127400 	call	12740 <strlen>
   122f8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   122fc:	e0bffd17 	ldw	r2,-12(fp)
   12300:	10c00217 	ldw	r3,8(r2)
   12304:	e0bffe17 	ldw	r2,-8(fp)
   12308:	10bfffc4 	addi	r2,r2,-1
   1230c:	1885883a 	add	r2,r3,r2
   12310:	10800003 	ldbu	r2,0(r2)
   12314:	10803fcc 	andi	r2,r2,255
   12318:	1080201c 	xori	r2,r2,128
   1231c:	10bfe004 	addi	r2,r2,-128
   12320:	10800bd8 	cmpnei	r2,r2,47
   12324:	1000031e 	bne	r2,zero,12334 <alt_find_file+0x6c>
    {
      len -= 1;
   12328:	e0bffe17 	ldw	r2,-8(fp)
   1232c:	10bfffc4 	addi	r2,r2,-1
   12330:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12334:	e0bffe17 	ldw	r2,-8(fp)
   12338:	e0ffff17 	ldw	r3,-4(fp)
   1233c:	1885883a 	add	r2,r3,r2
   12340:	10800003 	ldbu	r2,0(r2)
   12344:	10803fcc 	andi	r2,r2,255
   12348:	1080201c 	xori	r2,r2,128
   1234c:	10bfe004 	addi	r2,r2,-128
   12350:	10800be0 	cmpeqi	r2,r2,47
   12354:	1000081e 	bne	r2,zero,12378 <alt_find_file+0xb0>
   12358:	e0bffe17 	ldw	r2,-8(fp)
   1235c:	e0ffff17 	ldw	r3,-4(fp)
   12360:	1885883a 	add	r2,r3,r2
   12364:	10800003 	ldbu	r2,0(r2)
   12368:	10803fcc 	andi	r2,r2,255
   1236c:	1080201c 	xori	r2,r2,128
   12370:	10bfe004 	addi	r2,r2,-128
   12374:	10000a1e 	bne	r2,zero,123a0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   12378:	e0bffd17 	ldw	r2,-12(fp)
   1237c:	10800217 	ldw	r2,8(r2)
   12380:	e0fffe17 	ldw	r3,-8(fp)
   12384:	180d883a 	mov	r6,r3
   12388:	e17fff17 	ldw	r5,-4(fp)
   1238c:	1009883a 	mov	r4,r2
   12390:	001257c0 	call	1257c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12394:	1000021e 	bne	r2,zero,123a0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   12398:	e0bffd17 	ldw	r2,-12(fp)
   1239c:	00000706 	br	123bc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   123a0:	e0bffd17 	ldw	r2,-12(fp)
   123a4:	10800017 	ldw	r2,0(r2)
   123a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   123ac:	e0fffd17 	ldw	r3,-12(fp)
   123b0:	d0a00304 	addi	r2,gp,-32756
   123b4:	18bfcc1e 	bne	r3,r2,122e8 <_gp+0xffff6004>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   123b8:	0005883a 	mov	r2,zero
}
   123bc:	e037883a 	mov	sp,fp
   123c0:	dfc00117 	ldw	ra,4(sp)
   123c4:	df000017 	ldw	fp,0(sp)
   123c8:	dec00204 	addi	sp,sp,8
   123cc:	f800283a 	ret

000123d0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   123d0:	defffa04 	addi	sp,sp,-24
   123d4:	dfc00515 	stw	ra,20(sp)
   123d8:	df000415 	stw	fp,16(sp)
   123dc:	dc000315 	stw	r16,12(sp)
   123e0:	df000404 	addi	fp,sp,16
   123e4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   123e8:	00bffa04 	movi	r2,-24
   123ec:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   123f0:	e03ffc15 	stw	zero,-16(fp)
   123f4:	00001d06 	br	1246c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   123f8:	04000074 	movhi	r16,1
   123fc:	840f5004 	addi	r16,r16,15680
   12400:	e0bffc17 	ldw	r2,-16(fp)
   12404:	01400304 	movi	r5,12
   12408:	1009883a 	mov	r4,r2
   1240c:	0012c240 	call	12c24 <__mulsi3>
   12410:	8085883a 	add	r2,r16,r2
   12414:	10800017 	ldw	r2,0(r2)
   12418:	1000111e 	bne	r2,zero,12460 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   1241c:	04000074 	movhi	r16,1
   12420:	840f5004 	addi	r16,r16,15680
   12424:	e0bffc17 	ldw	r2,-16(fp)
   12428:	01400304 	movi	r5,12
   1242c:	1009883a 	mov	r4,r2
   12430:	0012c240 	call	12c24 <__mulsi3>
   12434:	8085883a 	add	r2,r16,r2
   12438:	e0fffe17 	ldw	r3,-8(fp)
   1243c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   12440:	d0e00717 	ldw	r3,-32740(gp)
   12444:	e0bffc17 	ldw	r2,-16(fp)
   12448:	1880020e 	bge	r3,r2,12454 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   1244c:	e0bffc17 	ldw	r2,-16(fp)
   12450:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
   12454:	e0bffc17 	ldw	r2,-16(fp)
   12458:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1245c:	00000606 	br	12478 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12460:	e0bffc17 	ldw	r2,-16(fp)
   12464:	10800044 	addi	r2,r2,1
   12468:	e0bffc15 	stw	r2,-16(fp)
   1246c:	e0bffc17 	ldw	r2,-16(fp)
   12470:	10800810 	cmplti	r2,r2,32
   12474:	103fe01e 	bne	r2,zero,123f8 <_gp+0xffff6114>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   12478:	e0bffd17 	ldw	r2,-12(fp)
}
   1247c:	e6ffff04 	addi	sp,fp,-4
   12480:	dfc00217 	ldw	ra,8(sp)
   12484:	df000117 	ldw	fp,4(sp)
   12488:	dc000017 	ldw	r16,0(sp)
   1248c:	dec00304 	addi	sp,sp,12
   12490:	f800283a 	ret

00012494 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   12494:	defffe04 	addi	sp,sp,-8
   12498:	df000115 	stw	fp,4(sp)
   1249c:	df000104 	addi	fp,sp,4
   124a0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   124a4:	e0bfff17 	ldw	r2,-4(fp)
   124a8:	10bffe84 	addi	r2,r2,-6
   124ac:	10c00428 	cmpgeui	r3,r2,16
   124b0:	18001a1e 	bne	r3,zero,1251c <alt_exception_cause_generated_bad_addr+0x88>
   124b4:	100690ba 	slli	r3,r2,2
   124b8:	00800074 	movhi	r2,1
   124bc:	10893304 	addi	r2,r2,9420
   124c0:	1885883a 	add	r2,r3,r2
   124c4:	10800017 	ldw	r2,0(r2)
   124c8:	1000683a 	jmp	r2
   124cc:	0001250c 	andi	zero,zero,1172
   124d0:	0001250c 	andi	zero,zero,1172
   124d4:	0001251c 	xori	zero,zero,1172
   124d8:	0001251c 	xori	zero,zero,1172
   124dc:	0001251c 	xori	zero,zero,1172
   124e0:	0001250c 	andi	zero,zero,1172
   124e4:	00012514 	movui	zero,1172
   124e8:	0001251c 	xori	zero,zero,1172
   124ec:	0001250c 	andi	zero,zero,1172
   124f0:	0001250c 	andi	zero,zero,1172
   124f4:	0001251c 	xori	zero,zero,1172
   124f8:	0001250c 	andi	zero,zero,1172
   124fc:	00012514 	movui	zero,1172
   12500:	0001251c 	xori	zero,zero,1172
   12504:	0001251c 	xori	zero,zero,1172
   12508:	0001250c 	andi	zero,zero,1172
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1250c:	00800044 	movi	r2,1
   12510:	00000306 	br	12520 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   12514:	0005883a 	mov	r2,zero
   12518:	00000106 	br	12520 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1251c:	0005883a 	mov	r2,zero
  }
}
   12520:	e037883a 	mov	sp,fp
   12524:	df000017 	ldw	fp,0(sp)
   12528:	dec00104 	addi	sp,sp,4
   1252c:	f800283a 	ret

00012530 <atexit>:
   12530:	200b883a 	mov	r5,r4
   12534:	000f883a 	mov	r7,zero
   12538:	000d883a 	mov	r6,zero
   1253c:	0009883a 	mov	r4,zero
   12540:	00127d81 	jmpi	127d8 <__register_exitproc>

00012544 <exit>:
   12544:	defffe04 	addi	sp,sp,-8
   12548:	000b883a 	mov	r5,zero
   1254c:	dc000015 	stw	r16,0(sp)
   12550:	dfc00115 	stw	ra,4(sp)
   12554:	2021883a 	mov	r16,r4
   12558:	00128f00 	call	128f0 <__call_exitprocs>
   1255c:	00800074 	movhi	r2,1
   12560:	1090c504 	addi	r2,r2,17172
   12564:	11000017 	ldw	r4,0(r2)
   12568:	20800f17 	ldw	r2,60(r4)
   1256c:	10000126 	beq	r2,zero,12574 <exit+0x30>
   12570:	103ee83a 	callr	r2
   12574:	8009883a 	mov	r4,r16
   12578:	0012c4c0 	call	12c4c <_exit>

0001257c <memcmp>:
   1257c:	01c000c4 	movi	r7,3
   12580:	3980192e 	bgeu	r7,r6,125e8 <memcmp+0x6c>
   12584:	2144b03a 	or	r2,r4,r5
   12588:	11c4703a 	and	r2,r2,r7
   1258c:	10000f26 	beq	r2,zero,125cc <memcmp+0x50>
   12590:	20800003 	ldbu	r2,0(r4)
   12594:	28c00003 	ldbu	r3,0(r5)
   12598:	10c0151e 	bne	r2,r3,125f0 <memcmp+0x74>
   1259c:	31bfff84 	addi	r6,r6,-2
   125a0:	01ffffc4 	movi	r7,-1
   125a4:	00000406 	br	125b8 <memcmp+0x3c>
   125a8:	20800003 	ldbu	r2,0(r4)
   125ac:	28c00003 	ldbu	r3,0(r5)
   125b0:	31bfffc4 	addi	r6,r6,-1
   125b4:	10c00e1e 	bne	r2,r3,125f0 <memcmp+0x74>
   125b8:	21000044 	addi	r4,r4,1
   125bc:	29400044 	addi	r5,r5,1
   125c0:	31fff91e 	bne	r6,r7,125a8 <_gp+0xffff62c4>
   125c4:	0005883a 	mov	r2,zero
   125c8:	f800283a 	ret
   125cc:	20c00017 	ldw	r3,0(r4)
   125d0:	28800017 	ldw	r2,0(r5)
   125d4:	18bfee1e 	bne	r3,r2,12590 <_gp+0xffff62ac>
   125d8:	31bfff04 	addi	r6,r6,-4
   125dc:	21000104 	addi	r4,r4,4
   125e0:	29400104 	addi	r5,r5,4
   125e4:	39bff936 	bltu	r7,r6,125cc <_gp+0xffff62e8>
   125e8:	303fe91e 	bne	r6,zero,12590 <_gp+0xffff62ac>
   125ec:	003ff506 	br	125c4 <_gp+0xffff62e0>
   125f0:	10c5c83a 	sub	r2,r2,r3
   125f4:	f800283a 	ret

000125f8 <memcpy>:
   125f8:	defffd04 	addi	sp,sp,-12
   125fc:	dfc00215 	stw	ra,8(sp)
   12600:	dc400115 	stw	r17,4(sp)
   12604:	dc000015 	stw	r16,0(sp)
   12608:	00c003c4 	movi	r3,15
   1260c:	2005883a 	mov	r2,r4
   12610:	1980452e 	bgeu	r3,r6,12728 <memcpy+0x130>
   12614:	2906b03a 	or	r3,r5,r4
   12618:	18c000cc 	andi	r3,r3,3
   1261c:	1800441e 	bne	r3,zero,12730 <memcpy+0x138>
   12620:	347ffc04 	addi	r17,r6,-16
   12624:	8822d13a 	srli	r17,r17,4
   12628:	28c00104 	addi	r3,r5,4
   1262c:	23400104 	addi	r13,r4,4
   12630:	8820913a 	slli	r16,r17,4
   12634:	2b000204 	addi	r12,r5,8
   12638:	22c00204 	addi	r11,r4,8
   1263c:	84000504 	addi	r16,r16,20
   12640:	2a800304 	addi	r10,r5,12
   12644:	22400304 	addi	r9,r4,12
   12648:	2c21883a 	add	r16,r5,r16
   1264c:	2811883a 	mov	r8,r5
   12650:	200f883a 	mov	r7,r4
   12654:	41000017 	ldw	r4,0(r8)
   12658:	1fc00017 	ldw	ra,0(r3)
   1265c:	63c00017 	ldw	r15,0(r12)
   12660:	39000015 	stw	r4,0(r7)
   12664:	53800017 	ldw	r14,0(r10)
   12668:	6fc00015 	stw	ra,0(r13)
   1266c:	5bc00015 	stw	r15,0(r11)
   12670:	4b800015 	stw	r14,0(r9)
   12674:	18c00404 	addi	r3,r3,16
   12678:	39c00404 	addi	r7,r7,16
   1267c:	42000404 	addi	r8,r8,16
   12680:	6b400404 	addi	r13,r13,16
   12684:	63000404 	addi	r12,r12,16
   12688:	5ac00404 	addi	r11,r11,16
   1268c:	52800404 	addi	r10,r10,16
   12690:	4a400404 	addi	r9,r9,16
   12694:	1c3fef1e 	bne	r3,r16,12654 <_gp+0xffff6370>
   12698:	89c00044 	addi	r7,r17,1
   1269c:	380e913a 	slli	r7,r7,4
   126a0:	310003cc 	andi	r4,r6,15
   126a4:	02c000c4 	movi	r11,3
   126a8:	11c7883a 	add	r3,r2,r7
   126ac:	29cb883a 	add	r5,r5,r7
   126b0:	5900212e 	bgeu	r11,r4,12738 <memcpy+0x140>
   126b4:	1813883a 	mov	r9,r3
   126b8:	2811883a 	mov	r8,r5
   126bc:	200f883a 	mov	r7,r4
   126c0:	42800017 	ldw	r10,0(r8)
   126c4:	4a400104 	addi	r9,r9,4
   126c8:	39ffff04 	addi	r7,r7,-4
   126cc:	4abfff15 	stw	r10,-4(r9)
   126d0:	42000104 	addi	r8,r8,4
   126d4:	59fffa36 	bltu	r11,r7,126c0 <_gp+0xffff63dc>
   126d8:	213fff04 	addi	r4,r4,-4
   126dc:	2008d0ba 	srli	r4,r4,2
   126e0:	318000cc 	andi	r6,r6,3
   126e4:	21000044 	addi	r4,r4,1
   126e8:	2109883a 	add	r4,r4,r4
   126ec:	2109883a 	add	r4,r4,r4
   126f0:	1907883a 	add	r3,r3,r4
   126f4:	290b883a 	add	r5,r5,r4
   126f8:	30000626 	beq	r6,zero,12714 <memcpy+0x11c>
   126fc:	198d883a 	add	r6,r3,r6
   12700:	29c00003 	ldbu	r7,0(r5)
   12704:	18c00044 	addi	r3,r3,1
   12708:	29400044 	addi	r5,r5,1
   1270c:	19ffffc5 	stb	r7,-1(r3)
   12710:	19bffb1e 	bne	r3,r6,12700 <_gp+0xffff641c>
   12714:	dfc00217 	ldw	ra,8(sp)
   12718:	dc400117 	ldw	r17,4(sp)
   1271c:	dc000017 	ldw	r16,0(sp)
   12720:	dec00304 	addi	sp,sp,12
   12724:	f800283a 	ret
   12728:	2007883a 	mov	r3,r4
   1272c:	003ff206 	br	126f8 <_gp+0xffff6414>
   12730:	2007883a 	mov	r3,r4
   12734:	003ff106 	br	126fc <_gp+0xffff6418>
   12738:	200d883a 	mov	r6,r4
   1273c:	003fee06 	br	126f8 <_gp+0xffff6414>

00012740 <strlen>:
   12740:	208000cc 	andi	r2,r4,3
   12744:	10002026 	beq	r2,zero,127c8 <strlen+0x88>
   12748:	20800007 	ldb	r2,0(r4)
   1274c:	10002026 	beq	r2,zero,127d0 <strlen+0x90>
   12750:	2005883a 	mov	r2,r4
   12754:	00000206 	br	12760 <strlen+0x20>
   12758:	10c00007 	ldb	r3,0(r2)
   1275c:	18001826 	beq	r3,zero,127c0 <strlen+0x80>
   12760:	10800044 	addi	r2,r2,1
   12764:	10c000cc 	andi	r3,r2,3
   12768:	183ffb1e 	bne	r3,zero,12758 <_gp+0xffff6474>
   1276c:	10c00017 	ldw	r3,0(r2)
   12770:	01ffbff4 	movhi	r7,65279
   12774:	39ffbfc4 	addi	r7,r7,-257
   12778:	00ca303a 	nor	r5,zero,r3
   1277c:	01a02074 	movhi	r6,32897
   12780:	19c7883a 	add	r3,r3,r7
   12784:	31a02004 	addi	r6,r6,-32640
   12788:	1946703a 	and	r3,r3,r5
   1278c:	1986703a 	and	r3,r3,r6
   12790:	1800091e 	bne	r3,zero,127b8 <strlen+0x78>
   12794:	10800104 	addi	r2,r2,4
   12798:	10c00017 	ldw	r3,0(r2)
   1279c:	19cb883a 	add	r5,r3,r7
   127a0:	00c6303a 	nor	r3,zero,r3
   127a4:	28c6703a 	and	r3,r5,r3
   127a8:	1986703a 	and	r3,r3,r6
   127ac:	183ff926 	beq	r3,zero,12794 <_gp+0xffff64b0>
   127b0:	00000106 	br	127b8 <strlen+0x78>
   127b4:	10800044 	addi	r2,r2,1
   127b8:	10c00007 	ldb	r3,0(r2)
   127bc:	183ffd1e 	bne	r3,zero,127b4 <_gp+0xffff64d0>
   127c0:	1105c83a 	sub	r2,r2,r4
   127c4:	f800283a 	ret
   127c8:	2005883a 	mov	r2,r4
   127cc:	003fe706 	br	1276c <_gp+0xffff6488>
   127d0:	0005883a 	mov	r2,zero
   127d4:	f800283a 	ret

000127d8 <__register_exitproc>:
   127d8:	defffa04 	addi	sp,sp,-24
   127dc:	dc000315 	stw	r16,12(sp)
   127e0:	04000074 	movhi	r16,1
   127e4:	8410c504 	addi	r16,r16,17172
   127e8:	80c00017 	ldw	r3,0(r16)
   127ec:	dc400415 	stw	r17,16(sp)
   127f0:	dfc00515 	stw	ra,20(sp)
   127f4:	18805217 	ldw	r2,328(r3)
   127f8:	2023883a 	mov	r17,r4
   127fc:	10003726 	beq	r2,zero,128dc <__register_exitproc+0x104>
   12800:	10c00117 	ldw	r3,4(r2)
   12804:	010007c4 	movi	r4,31
   12808:	20c00e16 	blt	r4,r3,12844 <__register_exitproc+0x6c>
   1280c:	1a000044 	addi	r8,r3,1
   12810:	8800221e 	bne	r17,zero,1289c <__register_exitproc+0xc4>
   12814:	18c00084 	addi	r3,r3,2
   12818:	18c7883a 	add	r3,r3,r3
   1281c:	18c7883a 	add	r3,r3,r3
   12820:	12000115 	stw	r8,4(r2)
   12824:	10c7883a 	add	r3,r2,r3
   12828:	19400015 	stw	r5,0(r3)
   1282c:	0005883a 	mov	r2,zero
   12830:	dfc00517 	ldw	ra,20(sp)
   12834:	dc400417 	ldw	r17,16(sp)
   12838:	dc000317 	ldw	r16,12(sp)
   1283c:	dec00604 	addi	sp,sp,24
   12840:	f800283a 	ret
   12844:	00800034 	movhi	r2,0
   12848:	10800004 	addi	r2,r2,0
   1284c:	10002626 	beq	r2,zero,128e8 <__register_exitproc+0x110>
   12850:	01006404 	movi	r4,400
   12854:	d9400015 	stw	r5,0(sp)
   12858:	d9800115 	stw	r6,4(sp)
   1285c:	d9c00215 	stw	r7,8(sp)
   12860:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   12864:	d9400017 	ldw	r5,0(sp)
   12868:	d9800117 	ldw	r6,4(sp)
   1286c:	d9c00217 	ldw	r7,8(sp)
   12870:	10001d26 	beq	r2,zero,128e8 <__register_exitproc+0x110>
   12874:	81000017 	ldw	r4,0(r16)
   12878:	10000115 	stw	zero,4(r2)
   1287c:	02000044 	movi	r8,1
   12880:	22405217 	ldw	r9,328(r4)
   12884:	0007883a 	mov	r3,zero
   12888:	12400015 	stw	r9,0(r2)
   1288c:	20805215 	stw	r2,328(r4)
   12890:	10006215 	stw	zero,392(r2)
   12894:	10006315 	stw	zero,396(r2)
   12898:	883fde26 	beq	r17,zero,12814 <_gp+0xffff6530>
   1289c:	18c9883a 	add	r4,r3,r3
   128a0:	2109883a 	add	r4,r4,r4
   128a4:	1109883a 	add	r4,r2,r4
   128a8:	21802215 	stw	r6,136(r4)
   128ac:	01800044 	movi	r6,1
   128b0:	12406217 	ldw	r9,392(r2)
   128b4:	30cc983a 	sll	r6,r6,r3
   128b8:	4992b03a 	or	r9,r9,r6
   128bc:	12406215 	stw	r9,392(r2)
   128c0:	21c04215 	stw	r7,264(r4)
   128c4:	01000084 	movi	r4,2
   128c8:	893fd21e 	bne	r17,r4,12814 <_gp+0xffff6530>
   128cc:	11006317 	ldw	r4,396(r2)
   128d0:	218cb03a 	or	r6,r4,r6
   128d4:	11806315 	stw	r6,396(r2)
   128d8:	003fce06 	br	12814 <_gp+0xffff6530>
   128dc:	18805304 	addi	r2,r3,332
   128e0:	18805215 	stw	r2,328(r3)
   128e4:	003fc606 	br	12800 <_gp+0xffff651c>
   128e8:	00bfffc4 	movi	r2,-1
   128ec:	003fd006 	br	12830 <_gp+0xffff654c>

000128f0 <__call_exitprocs>:
   128f0:	defff504 	addi	sp,sp,-44
   128f4:	df000915 	stw	fp,36(sp)
   128f8:	dd400615 	stw	r21,24(sp)
   128fc:	dc800315 	stw	r18,12(sp)
   12900:	dfc00a15 	stw	ra,40(sp)
   12904:	ddc00815 	stw	r23,32(sp)
   12908:	dd800715 	stw	r22,28(sp)
   1290c:	dd000515 	stw	r20,20(sp)
   12910:	dcc00415 	stw	r19,16(sp)
   12914:	dc400215 	stw	r17,8(sp)
   12918:	dc000115 	stw	r16,4(sp)
   1291c:	d9000015 	stw	r4,0(sp)
   12920:	2839883a 	mov	fp,r5
   12924:	04800044 	movi	r18,1
   12928:	057fffc4 	movi	r21,-1
   1292c:	00800074 	movhi	r2,1
   12930:	1090c504 	addi	r2,r2,17172
   12934:	12000017 	ldw	r8,0(r2)
   12938:	45005217 	ldw	r20,328(r8)
   1293c:	44c05204 	addi	r19,r8,328
   12940:	a0001c26 	beq	r20,zero,129b4 <__call_exitprocs+0xc4>
   12944:	a0800117 	ldw	r2,4(r20)
   12948:	15ffffc4 	addi	r23,r2,-1
   1294c:	b8000d16 	blt	r23,zero,12984 <__call_exitprocs+0x94>
   12950:	14000044 	addi	r16,r2,1
   12954:	8421883a 	add	r16,r16,r16
   12958:	8421883a 	add	r16,r16,r16
   1295c:	84402004 	addi	r17,r16,128
   12960:	a463883a 	add	r17,r20,r17
   12964:	a421883a 	add	r16,r20,r16
   12968:	e0001e26 	beq	fp,zero,129e4 <__call_exitprocs+0xf4>
   1296c:	80804017 	ldw	r2,256(r16)
   12970:	e0801c26 	beq	fp,r2,129e4 <__call_exitprocs+0xf4>
   12974:	bdffffc4 	addi	r23,r23,-1
   12978:	843fff04 	addi	r16,r16,-4
   1297c:	8c7fff04 	addi	r17,r17,-4
   12980:	bd7ff91e 	bne	r23,r21,12968 <_gp+0xffff6684>
   12984:	00800034 	movhi	r2,0
   12988:	10800004 	addi	r2,r2,0
   1298c:	10000926 	beq	r2,zero,129b4 <__call_exitprocs+0xc4>
   12990:	a0800117 	ldw	r2,4(r20)
   12994:	1000301e 	bne	r2,zero,12a58 <__call_exitprocs+0x168>
   12998:	a0800017 	ldw	r2,0(r20)
   1299c:	10003226 	beq	r2,zero,12a68 <__call_exitprocs+0x178>
   129a0:	a009883a 	mov	r4,r20
   129a4:	98800015 	stw	r2,0(r19)
   129a8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   129ac:	9d000017 	ldw	r20,0(r19)
   129b0:	a03fe41e 	bne	r20,zero,12944 <_gp+0xffff6660>
   129b4:	dfc00a17 	ldw	ra,40(sp)
   129b8:	df000917 	ldw	fp,36(sp)
   129bc:	ddc00817 	ldw	r23,32(sp)
   129c0:	dd800717 	ldw	r22,28(sp)
   129c4:	dd400617 	ldw	r21,24(sp)
   129c8:	dd000517 	ldw	r20,20(sp)
   129cc:	dcc00417 	ldw	r19,16(sp)
   129d0:	dc800317 	ldw	r18,12(sp)
   129d4:	dc400217 	ldw	r17,8(sp)
   129d8:	dc000117 	ldw	r16,4(sp)
   129dc:	dec00b04 	addi	sp,sp,44
   129e0:	f800283a 	ret
   129e4:	a0800117 	ldw	r2,4(r20)
   129e8:	80c00017 	ldw	r3,0(r16)
   129ec:	10bfffc4 	addi	r2,r2,-1
   129f0:	15c01426 	beq	r2,r23,12a44 <__call_exitprocs+0x154>
   129f4:	80000015 	stw	zero,0(r16)
   129f8:	183fde26 	beq	r3,zero,12974 <_gp+0xffff6690>
   129fc:	95c8983a 	sll	r4,r18,r23
   12a00:	a0806217 	ldw	r2,392(r20)
   12a04:	a5800117 	ldw	r22,4(r20)
   12a08:	2084703a 	and	r2,r4,r2
   12a0c:	10000b26 	beq	r2,zero,12a3c <__call_exitprocs+0x14c>
   12a10:	a0806317 	ldw	r2,396(r20)
   12a14:	2088703a 	and	r4,r4,r2
   12a18:	20000c1e 	bne	r4,zero,12a4c <__call_exitprocs+0x15c>
   12a1c:	89400017 	ldw	r5,0(r17)
   12a20:	d9000017 	ldw	r4,0(sp)
   12a24:	183ee83a 	callr	r3
   12a28:	a0800117 	ldw	r2,4(r20)
   12a2c:	15bfbf1e 	bne	r2,r22,1292c <_gp+0xffff6648>
   12a30:	98800017 	ldw	r2,0(r19)
   12a34:	153fcf26 	beq	r2,r20,12974 <_gp+0xffff6690>
   12a38:	003fbc06 	br	1292c <_gp+0xffff6648>
   12a3c:	183ee83a 	callr	r3
   12a40:	003ff906 	br	12a28 <_gp+0xffff6744>
   12a44:	a5c00115 	stw	r23,4(r20)
   12a48:	003feb06 	br	129f8 <_gp+0xffff6714>
   12a4c:	89000017 	ldw	r4,0(r17)
   12a50:	183ee83a 	callr	r3
   12a54:	003ff406 	br	12a28 <_gp+0xffff6744>
   12a58:	a0800017 	ldw	r2,0(r20)
   12a5c:	a027883a 	mov	r19,r20
   12a60:	1029883a 	mov	r20,r2
   12a64:	003fb606 	br	12940 <_gp+0xffff665c>
   12a68:	0005883a 	mov	r2,zero
   12a6c:	003ffb06 	br	12a5c <_gp+0xffff6778>

00012a70 <__divsi3>:
   12a70:	20001b16 	blt	r4,zero,12ae0 <__divsi3+0x70>
   12a74:	000f883a 	mov	r7,zero
   12a78:	28001616 	blt	r5,zero,12ad4 <__divsi3+0x64>
   12a7c:	200d883a 	mov	r6,r4
   12a80:	29001a2e 	bgeu	r5,r4,12aec <__divsi3+0x7c>
   12a84:	00800804 	movi	r2,32
   12a88:	00c00044 	movi	r3,1
   12a8c:	00000106 	br	12a94 <__divsi3+0x24>
   12a90:	10000d26 	beq	r2,zero,12ac8 <__divsi3+0x58>
   12a94:	294b883a 	add	r5,r5,r5
   12a98:	10bfffc4 	addi	r2,r2,-1
   12a9c:	18c7883a 	add	r3,r3,r3
   12aa0:	293ffb36 	bltu	r5,r4,12a90 <_gp+0xffff67ac>
   12aa4:	0005883a 	mov	r2,zero
   12aa8:	18000726 	beq	r3,zero,12ac8 <__divsi3+0x58>
   12aac:	0005883a 	mov	r2,zero
   12ab0:	31400236 	bltu	r6,r5,12abc <__divsi3+0x4c>
   12ab4:	314dc83a 	sub	r6,r6,r5
   12ab8:	10c4b03a 	or	r2,r2,r3
   12abc:	1806d07a 	srli	r3,r3,1
   12ac0:	280ad07a 	srli	r5,r5,1
   12ac4:	183ffa1e 	bne	r3,zero,12ab0 <_gp+0xffff67cc>
   12ac8:	38000126 	beq	r7,zero,12ad0 <__divsi3+0x60>
   12acc:	0085c83a 	sub	r2,zero,r2
   12ad0:	f800283a 	ret
   12ad4:	014bc83a 	sub	r5,zero,r5
   12ad8:	39c0005c 	xori	r7,r7,1
   12adc:	003fe706 	br	12a7c <_gp+0xffff6798>
   12ae0:	0109c83a 	sub	r4,zero,r4
   12ae4:	01c00044 	movi	r7,1
   12ae8:	003fe306 	br	12a78 <_gp+0xffff6794>
   12aec:	00c00044 	movi	r3,1
   12af0:	003fee06 	br	12aac <_gp+0xffff67c8>

00012af4 <__modsi3>:
   12af4:	20001716 	blt	r4,zero,12b54 <__modsi3+0x60>
   12af8:	000f883a 	mov	r7,zero
   12afc:	2005883a 	mov	r2,r4
   12b00:	28001216 	blt	r5,zero,12b4c <__modsi3+0x58>
   12b04:	2900162e 	bgeu	r5,r4,12b60 <__modsi3+0x6c>
   12b08:	01800804 	movi	r6,32
   12b0c:	00c00044 	movi	r3,1
   12b10:	00000106 	br	12b18 <__modsi3+0x24>
   12b14:	30000a26 	beq	r6,zero,12b40 <__modsi3+0x4c>
   12b18:	294b883a 	add	r5,r5,r5
   12b1c:	31bfffc4 	addi	r6,r6,-1
   12b20:	18c7883a 	add	r3,r3,r3
   12b24:	293ffb36 	bltu	r5,r4,12b14 <_gp+0xffff6830>
   12b28:	18000526 	beq	r3,zero,12b40 <__modsi3+0x4c>
   12b2c:	1806d07a 	srli	r3,r3,1
   12b30:	11400136 	bltu	r2,r5,12b38 <__modsi3+0x44>
   12b34:	1145c83a 	sub	r2,r2,r5
   12b38:	280ad07a 	srli	r5,r5,1
   12b3c:	183ffb1e 	bne	r3,zero,12b2c <_gp+0xffff6848>
   12b40:	38000126 	beq	r7,zero,12b48 <__modsi3+0x54>
   12b44:	0085c83a 	sub	r2,zero,r2
   12b48:	f800283a 	ret
   12b4c:	014bc83a 	sub	r5,zero,r5
   12b50:	003fec06 	br	12b04 <_gp+0xffff6820>
   12b54:	0109c83a 	sub	r4,zero,r4
   12b58:	01c00044 	movi	r7,1
   12b5c:	003fe706 	br	12afc <_gp+0xffff6818>
   12b60:	00c00044 	movi	r3,1
   12b64:	003ff106 	br	12b2c <_gp+0xffff6848>

00012b68 <__udivsi3>:
   12b68:	200d883a 	mov	r6,r4
   12b6c:	2900152e 	bgeu	r5,r4,12bc4 <__udivsi3+0x5c>
   12b70:	28001416 	blt	r5,zero,12bc4 <__udivsi3+0x5c>
   12b74:	00800804 	movi	r2,32
   12b78:	00c00044 	movi	r3,1
   12b7c:	00000206 	br	12b88 <__udivsi3+0x20>
   12b80:	10000e26 	beq	r2,zero,12bbc <__udivsi3+0x54>
   12b84:	28000516 	blt	r5,zero,12b9c <__udivsi3+0x34>
   12b88:	294b883a 	add	r5,r5,r5
   12b8c:	10bfffc4 	addi	r2,r2,-1
   12b90:	18c7883a 	add	r3,r3,r3
   12b94:	293ffa36 	bltu	r5,r4,12b80 <_gp+0xffff689c>
   12b98:	18000826 	beq	r3,zero,12bbc <__udivsi3+0x54>
   12b9c:	0005883a 	mov	r2,zero
   12ba0:	31400236 	bltu	r6,r5,12bac <__udivsi3+0x44>
   12ba4:	314dc83a 	sub	r6,r6,r5
   12ba8:	10c4b03a 	or	r2,r2,r3
   12bac:	1806d07a 	srli	r3,r3,1
   12bb0:	280ad07a 	srli	r5,r5,1
   12bb4:	183ffa1e 	bne	r3,zero,12ba0 <_gp+0xffff68bc>
   12bb8:	f800283a 	ret
   12bbc:	0005883a 	mov	r2,zero
   12bc0:	f800283a 	ret
   12bc4:	00c00044 	movi	r3,1
   12bc8:	003ff406 	br	12b9c <_gp+0xffff68b8>

00012bcc <__umodsi3>:
   12bcc:	2005883a 	mov	r2,r4
   12bd0:	2900122e 	bgeu	r5,r4,12c1c <__umodsi3+0x50>
   12bd4:	28001116 	blt	r5,zero,12c1c <__umodsi3+0x50>
   12bd8:	01800804 	movi	r6,32
   12bdc:	00c00044 	movi	r3,1
   12be0:	00000206 	br	12bec <__umodsi3+0x20>
   12be4:	30000c26 	beq	r6,zero,12c18 <__umodsi3+0x4c>
   12be8:	28000516 	blt	r5,zero,12c00 <__umodsi3+0x34>
   12bec:	294b883a 	add	r5,r5,r5
   12bf0:	31bfffc4 	addi	r6,r6,-1
   12bf4:	18c7883a 	add	r3,r3,r3
   12bf8:	293ffa36 	bltu	r5,r4,12be4 <_gp+0xffff6900>
   12bfc:	18000626 	beq	r3,zero,12c18 <__umodsi3+0x4c>
   12c00:	1806d07a 	srli	r3,r3,1
   12c04:	11400136 	bltu	r2,r5,12c0c <__umodsi3+0x40>
   12c08:	1145c83a 	sub	r2,r2,r5
   12c0c:	280ad07a 	srli	r5,r5,1
   12c10:	183ffb1e 	bne	r3,zero,12c00 <_gp+0xffff691c>
   12c14:	f800283a 	ret
   12c18:	f800283a 	ret
   12c1c:	00c00044 	movi	r3,1
   12c20:	003ff706 	br	12c00 <_gp+0xffff691c>

00012c24 <__mulsi3>:
   12c24:	0005883a 	mov	r2,zero
   12c28:	20000726 	beq	r4,zero,12c48 <__mulsi3+0x24>
   12c2c:	20c0004c 	andi	r3,r4,1
   12c30:	2008d07a 	srli	r4,r4,1
   12c34:	18000126 	beq	r3,zero,12c3c <__mulsi3+0x18>
   12c38:	1145883a 	add	r2,r2,r5
   12c3c:	294b883a 	add	r5,r5,r5
   12c40:	203ffa1e 	bne	r4,zero,12c2c <_gp+0xffff6948>
   12c44:	f800283a 	ret
   12c48:	f800283a 	ret

00012c4c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12c4c:	defffd04 	addi	sp,sp,-12
   12c50:	df000215 	stw	fp,8(sp)
   12c54:	df000204 	addi	fp,sp,8
   12c58:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   12c5c:	0001883a 	nop
   12c60:	e0bfff17 	ldw	r2,-4(fp)
   12c64:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   12c68:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12c6c:	10000226 	beq	r2,zero,12c78 <_exit+0x2c>
    ALT_SIM_FAIL();
   12c70:	002af070 	cmpltui	zero,zero,43969
   12c74:	00000106 	br	12c7c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   12c78:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12c7c:	003fff06 	br	12c7c <_gp+0xffff6998>
